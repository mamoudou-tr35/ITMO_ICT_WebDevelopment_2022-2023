{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u041b\u0410\u0411\u041e\u0420\u0410\u0422\u041e\u0420\u041d\u0410\u042f \u0420\u0410\u0411\u041e\u0422\u0410 4 \u041c\u0438\u0433\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u043d\u0435\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0439 \u0441\u0430\u0439\u0442 \u043d\u0430 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a Vue.JS. \u0412\u0430\u0440\u0438\u0430\u043d\u0442: 2 \u041f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0430 \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0445 \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u0439 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u0451\u0440\u0441\u0442\u043a\u0443 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0441\u0442\u0440\u0430\u043d\u0438\u0446: \u0412\u0445\u043e\u0434 \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u041f\u043e\u0438\u0441\u043a \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u044f (\u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e \u0442\u0438\u043f\u0443 \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u044f, \u043c\u0435\u0441\u0442\u0443 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f) \u041a\u0430\u043b\u0435\u043d\u0434\u0430\u0440\u044c \u0431\u043b\u0438\u0436\u0430\u0439\u0448\u0438\u0445 \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u0439 \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u044f \u041b\u0438\u0447\u043d\u044b\u0439 \u043a\u0430\u0431\u0438\u043d\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0441\u043e \u0441\u043f\u0438\u0441\u043a\u043e\u043c \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u0439, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u043d \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u043b\u0441\u044f \u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f: \u0414\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0451\u043d \u0440\u043e\u0443\u0442\u0435\u0440 \u0414\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u0432\u043d\u0435\u0448\u043d\u0438\u043c API \u0420\u0430\u0437\u0443\u043c\u043d\u043e\u0435 \u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u0430 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0431\u044d\u043a\u0435\u043d\u0434: \u0424\u0430\u0439\u043b\u044b \u0441 \u043a\u043e\u0434\u043e\u043c Models.py from django.db import models from django.contrib.auth.models import AbstractUser # Create your models here. class Event ( models . Model ): CATEGORY = [ ( \"\u0421\u043f\u043e\u0440\u0442 \u0438 \u0444\u0438\u0442\u043d\u0435\u0441\" , \"\u0421\u043f\u043e\u0440\u0442 \u0438 \u0444\u0438\u0442\u043d\u0435\u0441\" ), ( \"\u0418\u0441\u043a\u0443\u0441\u0441\u0442\u0432\u043e \u0438 \u043a\u0443\u043b\u044c\u0442\u0443\u0440\u0430\" , \"\u0418\u0441\u043a\u0443\u0441\u0441\u0442\u0432\u043e \u0438 \u043a\u0443\u043b\u044c\u0442\u0443\u0440\u0430\" ), ( \"\u041f\u0440\u0438\u0440\u043e\u0434\u0430\" , \"\u041f\u0440\u0438\u0440\u043e\u0434\u0430\" ), ( \"\u041a\u0430\u0440\u044c\u0435\u0440\u0430 \u0438 \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435\" , \"\u041a\u0430\u0440\u044c\u0435\u0440\u0430 \u0438 \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435\" ), ( \"\u0422\u0435\u0430\u0442\u0440\u044b\" , \"\u0422\u0435\u0430\u0442\u0440\u044b\" ), ( \"\u041a\u043e\u043d\u0446\u0435\u0440\u0442\u044b\" , \"\u041a\u043e\u043d\u0446\u0435\u0440\u0442\u044b\" ), ] TYPES_EVENTS = [ ( \"offline\" , \"\u041e\u0447\u043d\u043e\" ), ( \"online\" , \"\u041e\u043d\u043b\u0430\u0439\u043d\" ), ] DISTRICT = [ ( 'any' , '\u041b\u044e\u0431\u043e\u0439' ), ( \"admiral\" , \"\u0410\u0434\u043c\u0438\u0440\u0430\u043b\u0442\u0435\u0439\u0441\u043a\u0438\u0439\" ), ( \"vasileostrov\" , \"\u0412\u0430\u0441\u0438\u043b\u0435\u043e\u0441\u0442\u0440\u043e\u0432\u0441\u043a\u043e\u0439\" ), ( \"vyborg\" , \"\u0412\u044b\u0431\u043e\u0440\u0433\u0441\u043a\u0438\u0439\" ), ( \"kalininsk\" , \"\u041a\u0430\u043b\u0438\u043d\u0438\u043d\u0441\u043a\u0438\u0439\" ), ( \"kirov\" , \"\u041a\u0438\u0440\u043e\u0432\u0441\u043a\u0438\u0439\" ), ( \"krasnogvard\" , \"\u041a\u0440\u0430\u0441\u043d\u043e\u0433\u0432\u0430\u0440\u0434\u0435\u0439\u0441\u043a\u0438\u0439\" ), ( \"krasnosel\" , \"\u041a\u0440\u0430\u0441\u043d\u043e\u0441\u0435\u043b\u044c\u0441\u043a\u0438\u0439\" ), ( \"kronshtad\" , \"\u041a\u0440\u043e\u043d\u0448\u0442\u0430\u0434\u0441\u043a\u0438\u0439\" ), ( \"moskovsk\" , \"\u041c\u043e\u0441\u043a\u043e\u0432\u0441\u043a\u0438\u0439\" ), ( \"nevsk\" , \"\u041d\u0435\u0432\u0441\u043a\u0438\u0439\" ), ( \"petrograd\" , \"\u041f\u0435\u0442\u0440\u043e\u0433\u0440\u0430\u0434\u0441\u043a\u0438\u0439\" ), ( \"center\" , \"\u0426\u0435\u043d\u0442\u0440\u0430\u043b\u044c\u043d\u044b\u0439\" ), ] name = models . CharField ( max_length = 100 ) category = models . CharField ( max_length = 30 , choices = CATEGORY ) place = models . CharField ( max_length = 100 ) date = models . DateTimeField () price = models . CharField ( max_length = 50 ) photo = models . CharField ( max_length = 100 ) type_event = models . CharField ( max_length = 10 , choices = TYPES_EVENTS ) district = models . CharField ( max_length = 20 , choices = DISTRICT ) description = models . TextField ( blank = True ) contact_number = models . CharField ( max_length = 12 , blank = True ) contact_name = models . CharField ( max_length = 50 , blank = True ) map = models . TextField ( blank = True ) def __str__ ( self ): return self . name class User ( AbstractUser ): last_name = models . CharField ( max_length = 50 ) first_name = models . CharField ( max_length = 50 ) email = models . CharField ( max_length = 50 ) REQUIRED_FIELDS = [ 'last_name' , 'first_name' , 'email' ] class UsersEvents ( models . Model ): user_id = models . ForeignKey ( User , on_delete = models . CASCADE , related_name = 'reg_user' ) event_id = models . ForeignKey ( Event , on_delete = models . CASCADE , related_name = 'reg_event' ) views.py from django.shortcuts import render from rest_framework import views , permissions from rest_framework.generics import ListAPIView , RetrieveUpdateAPIView , CreateAPIView , RetrieveAPIView , DestroyAPIView from .serializers import * from .models import * from django.db.models import Count from rest_framework.response import Response class EventsList ( ListAPIView ): serializer_class = EventSerializer def get_queryset ( self ): queryset = Event . objects . all () category = self . request . query_params . get ( 'category' ) district = self . request . query_params . get ( 'district' ) type_event = self . request . query_params . get ( 'type_event' ) if ( type_event is not None ) and ( type_event != '' ): queryset = queryset . filter ( type_event = type_event ) if ( category is not None ) and ( category != '' ): queryset = queryset . filter ( category = category ) if ( district is not None ) and ( district != '' ): queryset = queryset . filter ( district = district ) return queryset class EventRetrieve ( RetrieveAPIView ): serializer_class = EventSerializer queryset = Event . objects . all () class UserList ( ListAPIView ): serializer_class = UserSerializer queryset = Event . objects . all () class UserCreate ( CreateAPIView ): serializer_class = UserSerializer queryset = Event . objects . all () class UserRetrieve ( RetrieveUpdateAPIView ): serializer_class = UserSerializer queryset = Event . objects . all () class UserEventsList ( ListAPIView ): def get ( self , request ): user_events = UsersEvents . objects . filter ( user_id = request . user . id ) serializer = UserEventsSerializer ( user_events , many = True ) return Response ({ \"user_events\" : serializer . data }) class RegisterUserOnEvent ( views . APIView ): def post ( self , request ): event_id = request . data . get ( 'event' ) event = Event . objects . get ( id = event_id ) user_event = UsersEvents . objects . create ( user_id = request . user , event_id = event ) user_event . save () return Response ({ \"Success\" : \"Registration user on event {} done succesfully\" . format ( user_event . id )}) class DeleteUserEvent ( DestroyAPIView ): serializer_class = UserOnEventSerializer queryset = UsersEvents . objects . all () serializers.py from rest_framework import serializers from .models import * class EventSerializer ( serializers . ModelSerializer ): class Meta : model = Event fields = \"__all__\" class UserSerializer ( serializers . ModelSerializer ): class Meta : model = User fields = \"__all__\" class UserOnEventSerializer ( serializers . ModelSerializer ): class Meta : model = UsersEvents fields = \"__all__\" class UserEventsSerializer ( serializers . ModelSerializer ): event_id = EventSerializer () class Meta : model = UsersEvents fields = ( \"id\" , \"event_id\" ) urls.py from django.urls import path from .views import * urlpatterns = [ path ( 'events' , EventsList . as_view ()), path ( 'events/<int:pk>' , EventRetrieve . as_view ()), path ( 'users' , UserList . as_view ()), path ( 'users/<int:pk>' , UserRetrieve . as_view ()), path ( 'users_events' , UserEventsList . as_view ()), path ( 'users_events/add' , RegisterUserOnEvent . as_view ()), path ( 'users_events/<int:pk>' , DeleteUserEvent . as_view ()) ] FRONT-END: \u0424\u0430\u0439\u043b\u044b \u0441 \u043a\u043e\u0434\u043e\u043c Vue.js components Header.vue < template > < svg xmlns = \"http://www.w3.org/2000/svg\" xmlns : xlink = \"http://www.w3.org/1999/xlink\" display = \"none\" > < symbol id = \"login\" fill = \"currentColor\" class = \"bi bi-box-arrow-in-right\" viewBox = \"0 0 16 16\" > < path fill - rule = \"evenodd\" d = \"M6 3.5a.5.5 0 0 1 .5-.5h8a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-8a.5.5 0 0 1-.5-.5v-2a.5.5 0 0 0-1 0v2A1.5 1.5 0 0 0 6.5 14h8a1.5 1.5 0 0 0 1.5-1.5v-9A1.5 1.5 0 0 0 14.5 2h-8A1.5 1.5 0 0 0 5 3.5v2a.5.5 0 0 0 1 0v-2z\" /> < path fill - rule = \"evenodd\" d = \"M11.854 8.354a.5.5 0 0 0 0-.708l-3-3a.5.5 0 1 0-.708.708L10.293 7.5H1.5a.5.5 0 0 0 0 1h8.793l-2.147 2.146a.5.5 0 0 0 .708.708l3-3z\" /> < /symbol> < symbol id = \"signup\" fill = \"currentColor\" class = \"bi bi-key\" viewBox = \"0 0 16 16\" > < path d = \"M0 8a4 4 0 0 1 7.465-2H14a.5.5 0 0 1 .354.146l1.5 1.5a.5.5 0 0 1 0 .708l-1.5 1.5a.5.5 0 0 1-.708 0L13 9.207l-.646.647a.5.5 0 0 1-.708 0L11 9.207l-.646.647a.5.5 0 0 1-.708 0L9 9.207l-.646.647A.5.5 0 0 1 8 10h-.535A4 4 0 0 1 0 8zm4-3a3 3 0 1 0 2.712 4.285A.5.5 0 0 1 7.163 9h.63l.853-.854a.5.5 0 0 1 .708 0l.646.647.646-.647a.5.5 0 0 1 .708 0l.646.647.646-.647a.5.5 0 0 1 .708 0l.646.647.793-.793-1-1h-6.63a.5.5 0 0 1-.451-.285A3 3 0 0 0 4 5z\" /> < path d = \"M4 8a1 1 0 1 1-2 0 1 1 0 0 1 2 0z\" /> < /symbol> < symbol id = \"log_out\" fill = \"currentColor\" class = \"bi bi-box-arrow-right\" viewBox = \"0 0 16 16\" > < path fill - rule = \"evenodd\" d = \"M10 12.5a.5.5 0 0 1-.5.5h-8a.5.5 0 0 1-.5-.5v-9a.5.5 0 0 1 .5-.5h8a.5.5 0 0 1 .5.5v2a.5.5 0 0 0 1 0v-2A1.5 1.5 0 0 0 9.5 2h-8A1.5 1.5 0 0 0 0 3.5v9A1.5 1.5 0 0 0 1.5 14h8a1.5 1.5 0 0 0 1.5-1.5v-2a.5.5 0 0 0-1 0v2z\" /> < path fill - rule = \"evenodd\" d = \"M15.854 8.354a.5.5 0 0 0 0-.708l-3-3a.5.5 0 0 0-.708.708L14.293 7.5H5.5a.5.5 0 0 0 0 1h8.793l-2.147 2.146a.5.5 0 0 0 .708.708l3-3z\" /> < /symbol> < symbol id = \"lk\" fill = \"currentColor\" class = \"bi bi-person-circle\" viewBox = \"0 0 16 16\" > < path d = \"M11 6a3 3 0 1 1-6 0 3 3 0 0 1 6 0z\" /> < path fill - rule = \"evenodd\" d = \"M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8zm8-7a7 7 0 0 0-5.468 11.37C3.242 11.226 4.805 10 8 10s4.757 1.225 5.468 2.37A7 7 0 0 0 8 1z\" /> < /symbol> < symbol id = \"calendar\" fill = \"currentColor\" class = \"bi bi-calendar3\" viewBox = \"0 0 16 16\" > < path d = \"M14 0H2a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2zM1 3.857C1 3.384 1.448 3 2 3h12c.552 0 1 .384 1 .857v10.286c0 .473-.448.857-1 .857H2c-.552 0-1-.384-1-.857V3.857z\" /> < path d = \"M6.5 7a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm3 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm3 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm-9 3a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm3 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm3 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm3 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm-9 3a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm3 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm3 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2z\" /> < /symbol> < symbol id = \"search\" fill = \"currentColor\" class = \"bi bi-search-heart\" viewBox = \"0 0 16 16\" > < path d = \"M6.5 4.482c1.664-1.673 5.825 1.254 0 5.018-5.825-3.764-1.664-6.69 0-5.018Z\" /> < path d = \"M13 6.5a6.471 6.471 0 0 1-1.258 3.844c.04.03.078.062.115.098l3.85 3.85a1 1 0 0 1-1.414 1.415l-3.85-3.85a1.007 1.007 0 0 1-.1-.115h.002A6.5 6.5 0 1 1 13 6.5ZM6.5 12a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11Z\" /> < /symbol> < symbol id = \"tag\" fill = \"currentColor\" class = \"bi bi-tag\" viewBox = \"0 0 16 16\" > < path d = \"M6 4.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm-1 0a.5.5 0 1 0-1 0 .5.5 0 0 0 1 0z\" /> < path d = \"M2 1h4.586a1 1 0 0 1 .707.293l7 7a1 1 0 0 1 0 1.414l-4.586 4.586a1 1 0 0 1-1.414 0l-7-7A1 1 0 0 1 1 6.586V2a1 1 0 0 1 1-1zm0 5.586 7 7L13.586 9l-7-7H2v4.586z\" /> < /symbol> < symbol id = \"place\" fill = \"currentColor\" class = \"bi bi-geo-alt\" viewBox = \"0 0 16 16\" > < path d = \"M12.166 8.94c-.524 1.062-1.234 2.12-1.96 3.07A31.493 31.493 0 0 1 8 14.58a31.481 31.481 0 0 1-2.206-2.57c-.726-.95-1.436-2.008-1.96-3.07C3.304 7.867 3 6.862 3 6a5 5 0 0 1 10 0c0 .862-.305 1.867-.834 2.94zM8 16s6-5.686 6-10A6 6 0 0 0 2 6c0 4.314 6 10 6 10z\" /> < path d = \"M8 8a2 2 0 1 1 0-4 2 2 0 0 1 0 4zm0 1a3 3 0 1 0 0-6 3 3 0 0 0 0 6z\" /> < /symbol> < /svg> < nav class = \"navbar navbar-expand-lg navbar-dark\" > < div class = \"container-fluid\" > < a class = \"navbar-brand\" href = \"#\" > < img src = \"./icons/icons8-monogramme-moyen.gif\" alt = \"\u041b\u043e\u0433\u043e\" width = \"30\" height = \"24\" class = \"d-inline-block align-text-top\" > EvenementTable < /a> < button class = \"navbar-toggler\" type = \"button\" data - bs - toggle = \"collapse\" data - bs - target = \"#navbarNavAltMarkup\" aria - controls = \"navbarNavAltMarkup\" aria - expanded = \"false\" aria - label = \"Toggle navigation\" > < span class = \"navbar-toggler-icon\" >< /span> < /button> < div class = \"collapse navbar-collapse\" id = \"navbarNavAltMarkup\" > < div class = \"navbar-nav\" > < a class = \"nav-link active\" aria - current = \"page\" href = \"#\" @ click = \"$router.push('/')\" > < svg class = \"icon m-1\" > < use xlink : href = \"#search\" >< /use> < /svg> Search for events < /a> < /div> < div class = \"navbar-nav\" > < a class = \"nav-link active\" aria - current = \"page\" href = \"#\" @ click = \"$router.push('/calendar')\" > < svg class = \"icon m-1\" > < use xlink : href = \"#calendar\" >< /use> < /svg> Calendar of events < /a> < /div> < /div> < form v - if = \"!token\" class = \"justify-content-end\" > < a class = \"btn btn-light me-2\" href = \"#\" role = \"button\" id = \"enter\" @ click = \"$router.push('/login/')\" > < svg class = \"icon m-1\" > < use xlink : href = \"#login\" >< /use> < /svg> Login < /a> < a class = \"btn btn-sm btn-outline-light\" role = \"button\" id = \"registr\" href = \"#\" @ click = \"$router.push('/registration/')\" > < svg class = \"icon m-1\" > < use xlink : href = \"#signup\" >< /use> < /svg> Sign up < /a> < /form> < form v - else class = \"justify-content-end\" > < button class = \"btn btn-light me-2\" type = \"button\" id = \"enterlk\" @ click = \"$router.push('/lk/')\" > < svg class = \"icon m-1\" > < use xlink : href = \"#lk\" >< /use> < /svg>Personal account</button> < a class = \"btn btn-sm btn-outline-light\" href = \"#\" role = \"button\" id = \"logout\" @ click = \"Logout\" > < svg class = \"icon m-1\" > < use xlink : href = \"#log_out\" >< /use> < /svg>Exit</a> < /form> < /div> < /nav> < /template> < script > import { mapState , mapActions } from 'pinia' ; import useUserStore from '@/stores/user' export default { name : 'Header' , computed : { ... mapState ( useUserStore , [ 'token' ]) }, mounted () { this . setToken ( window . localStorage . getItem ( 'token' )) }, methods : { ... mapActions ( useUserStore , [ 'setToken' , 'logout' ]), async Logout () { await this . logout () this . $router . push ( '/' ) } } } < /script> Filter.vue: Filters for the main page < template > < div class = \"container d-flex p-3 justify-content-center h2 text\" > Find a suitable event < /div> < div class = \"container d-grid gap-2 d-md-flex justify-content-center\" > < div class = \"row\" > < div class = \"form col-12 col-sm-6 col-lg-3 col-md-5 col-xl-3 \" > < select class = \"form-select event-region form-color\" aria - label = \".form-select-lg example\" id = \"district\" v - model = \"district\" > < option value = \"\" > \u0420\u0430\u0439\u043e\u043d < /option> < option value = \"admiral\" > \u0410\u0434\u043c\u0438\u0440\u0430\u043b\u0442\u0435\u0439\u0441\u043a\u0438\u0439 < /option> < option value = \"vasileostrov\" > \u0412\u0430\u0441\u0438\u043b\u0435\u043e\u0441\u0442\u0440\u043e\u0432\u0441\u043a\u0438\u0439 < /option> < option value = \"vyborg\" > \u0412\u044b\u0431\u043e\u0440\u0433\u0441\u043a\u0438\u0439 < /option> < option value = \"kalininsk\" > \u041a\u0430\u043b\u0438\u043d\u0438\u043d\u0441\u043a\u0438\u0439 < /option> < option value = \"kirov\" > \u041a\u0438\u0440\u043e\u0432\u0441\u043a\u0438\u0439 < /option> < option value = \"krasnogvard\" > \u041a\u0440\u0430\u0441\u043d\u043e\u0433\u0432\u0430\u0440\u0434\u0435\u0439\u0441\u043a\u0438\u0439 < /option> < option value = \"krasnosel\" > \u041a\u0440\u0430\u0441\u043d\u043e\u0441\u0435\u043b\u044c\u0441\u043a\u0438\u0439 < /option> < option value = \"kronshtad\" > \u041a\u0440\u043e\u043d\u0448\u0442\u0430\u0434\u0441\u043a\u0438\u0439 < /option> < option value = \"moskov\" > \u041c\u043e\u0441\u043a\u043e\u0432\u0441\u043a\u0438\u0439 < /option> < option value = \"nevsk\" > \u041d\u0435\u0432\u0441\u043a\u0438\u0439 < /option> < option value = \"petrograd\" > \u041f\u0435\u0442\u0440\u043e\u0433\u0440\u0430\u0434\u0441\u043a\u0438\u0439 < /option> < option value = \"center\" > \u0426\u0435\u043d\u0442\u0440\u0430\u043b\u044c\u043d\u044b\u0439 < /option> < /select> < /div> < div class = \"form col-12 col-sm-6 col-lg-3 col-md-5 col-xl-3\" > < select class = \"form-select event-category form-color\" aria - label = \".form-select-lg example\" id = \"category\" v - model = \"category\" > < option value = \"\" > \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f < /option> < option value = \"\u0422\u0435\u0430\u0442\u0440\u044b\" > \u0422\u0435\u0430\u0442\u0440\u044b < /option> < option value = \"\u041a\u043e\u043d\u0446\u0435\u0440\u0442\u044b\" > \u041a\u043e\u043d\u0446\u0435\u0440\u0442\u044b < /option> < option value = \"\u0418\u0433\u0440\u044b\" > \u0418\u0433\u0440\u044b < /option> < option value = \"\u0421\u043f\u043e\u0440\u0442 \u0438 \u0444\u0438\u0442\u043d\u0435\u0441\" > \u0421\u043f\u043e\u0440\u0442 \u0438 \u0444\u0438\u0442\u043d\u0435\u0441 < /option> < option value = \"\u0418\u0441\u0441\u043a\u0443\u0441\u0442\u0432\u043e \u0438 \u043a\u0443\u043b\u044c\u0442\u0443\u0440\u0430\" > \u0418\u0441\u0441\u043a\u0443\u0441\u0442\u0432\u043e \u0438 \u043a\u0443\u043b\u044c\u0442\u0443\u0440\u0430 < /option> < option value = \"\u041a\u0430\u0440\u044c\u0435\u0440\u0430 \u0438 \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435\" > \u041a\u0430\u0440\u044c\u0435\u0440\u0430 \u0438 \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 < /option> < /select> < /div> < div class = \"form col-12 col-sm-6 col-lg-3 col-md-5 col-xl-3\" > < select class = \"form-select type-event form-color\" aria - label = \".form-select-lg example\" id = \"type-event\" v - model = \"type_event\" > < option value = \"\" > \u041b\u044e\u0431\u043e\u0439 \u0442\u0438\u043f < /option> < option value = \"offline\" > \u041e\u0447\u043d\u043e < /option> < option value = \"online\" > \u041e\u043d\u043b\u0430\u0439\u043d < /option> < /select> < /div> < form class = \"col-lg-3 mb-3 search-form\" > < button class = \"btn my-btn-outline-secondary search-btn\" type = \"button\" id = \"button-search\" @ click = \"filterEvents\" > < svg class = \"icon m-1\" > < use xlink : href = \"#search\" >< /use> < /svg> Search < /button> < /form> < /div> < /div> < /template> < script > import { mapActions , mapState } from 'pinia' ; import useEventsStore from '@/stores/event' export default { name : \"Filter\" , data () { return { category : '' , district : '' , type_event : '' } }, computed : { ... mapState ( useEventsStore , [ 'events' , 'categoryFilter' , 'districtFilter' , 'typeFilter' ]), }, methods : { ... mapActions ( useEventsStore , [ 'fetchEventsByCategoryDistrictType' ]), filterEvents () { this . fetchEventsByCategoryDistrictType ( this . category , this . district , this . type_event ) } } } < /script> Footer.vue < template > < footer class = \"d-flex flex-wrap justify-content-between align-items-center py-3 border-top navbar-expand-lg navbar-dark navbar\" style = \"background-color: #20c957;\" > < p class = \"col-md-4 mb-0 text-white\" > \u00a9 2022 Traore Mamoudou , Inc < /p> < a href = \"/\" class = \"col-md-4 d-flex align-items-center justify-content-center mb-3 mb-md-0 me-md-auto link-dark text-white text-decoration-none\" > < img src = \"./icons/icons8-monogramme-moyen.gif\" alt = \"\u041b\u043e\u0433\u043e\" width = \"30\" height = \"24\" class = \"d-inline-block align-text-top \" > EvenementTable < /a> < ul class = \"nav col-md-4 justify-content-end navbar-nav\" > < li class = \"nav-item\" >< a href = \"#\" class = \"nav-link px-2\" > Home < /a></li> < li class = \"nav-item\" >< a href = \"#\" class = \"nav-link px-2\" > Features < /a></li> < li class = \"nav-item\" >< a href = \"#\" class = \"nav-link px-2\" > Pricing < /a></li> < li class = \"nav-item\" >< a href = \"#\" class = \"nav-link px-2\" > FAQs < /a></li> < li class = \"nav-item\" >< a href = \"#\" class = \"nav-link px-2\" > About < /a></li> < /ul> < /footer> < /template> < script > export default { name : \"Footer\" } < /script> RegisterForm.vue - Sign unp < template > < main > < div class = \"container col-md-6 p-5\" > < form @ submit . prevent = \"register\" > < div class = \"mb-3\" > < label for = \"first_name\" class = \"form-label text\" > Name :< /label> < input type = \"text\" class = \"form-control\" id = \"first_name\" name = \"first_name\" v - model = \"first_name\" > < /div> < div class = \"mb-3\" > < label for = \"last_name\" class = \"form-label text\" > family name :< /label> < input type = \"text\" class = \"form-control\" id = \"last_name\" name = \"last_name\" v - model = \"last_name\" > < /div> < div class = \"mb-3\" > < label for = \"email\" class = \"form-label text\" > Enter your e - mail :< /label> < input type = \"email\" class = \"form-control\" id = \"email\" name = \"email\" v - model = \"email\" > < /div> < div class = \"mb-3\" > < label for = \"password\" class = \"form-label text\" > Pick a password :< /label> < input type = \"password\" class = \"form-control\" id = \"password\" name = \"password\" v - model = \"password\" > < /div> < p v - if = \"error\" class = \"error text-danger\" > < strong > {{ error }} < /strong> < /p> < div class = \"p-4 d-flex justify-content-center\" > < button type = \"button\" class = \"btn btn-success mb-3\" @ click = \"reg\" > Register < /button> < /div> < /form> < div class = \"container d-flex\" > < p class = \"text\" > Already have an account ?< /p> < a href = \"#\" class = \"ms-2 text-success\" @ click = \"$router.push('/login/')\" > Login up < /a> < /div> < /div> < /main> < /template> < script > import { mapActions , mapState } from 'pinia' import router from '@/router' import useUserStore from '@/stores/user' export default { name : 'RegisterForm' , data () { return { first_name : \"\" , last_name : \"\" , email : \"\" , username : \"\" , password : \"\" , error : \"\" }; }, methods : { ... mapActions ( useUserStore , [ 'register' , 'login' ]), async reg () { this . error = '' if ( ! this . email || ! this . password ) { this . error = 'Error! Enter email and password.' return } let result try { result = await this . register ({ last_name : this . last_name , first_name : this . first_name , username : this . email , email : this . email , password : this . password }) } catch ( e ) { this . error = 'Error! Invalid email or password.' return } if ( result ? . status === 201 ) { await this . login ({ username : this . email , password : this . password }) this . $router . push ( '/lk' ) } } } } < /script> LogInForm.vue - Login < template > < main > < div class = \"container col-md-6 p-5\" > < form > < div class = \"mb-3\" > < label for = \"email\" class = \"form-label text\" > Enter your e - mail :< /label> < input type = \"email\" class = \"form-control\" id = \"email\" name = \"email\" v - model = \"email\" > < /div> < div class = \"mb-3\" > < label for = \"password\" class = \"form-label text\" > Enter password :< /label> < input type = \"password\" class = \"form-control\" id = \"password\" name = \"password\" v - model = \"password\" > < /div> < p v - if = \"error\" class = \"error text-danger\" > < strong > {{ error }} < /strong> < /p> < div class = \"p-4 d-flex justify-content-center\" > < button type = \"button\" class = \"btn btn-success mb-3\" @ click = \"logIn\" > Sign in < /button> < /div> < /form> < div class = \"container d-flex\" > < p class = \"text\" > Do you have not an account yet ?< /p> < a href = \"#\" class = \"ms-2 text-success\" @ click = \"$router.push('/registration/')\" > Sign in < /a> < /div> < /div> < /main> < /template> < script > import { mapActions , mapState } from 'pinia' import router from '@/router' import useUserStore from '@/stores/user' export default { name : \"LogIn\" , data (){ return { email : \"\" , password : \"\" , error : \"\" } }, methods : { ... mapActions ( useUserStore , [ 'login' ]), async logIn () { if ( ! this . email || ! this . password ) { this . error = '\u041e\u0448\u0438\u0431\u043a\u0430! \u0412\u0432\u0435\u0434\u0438\u0442\u0435 email \u0438 \u043f\u0430\u0440\u043e\u043b\u044c.' return } try { await this . login ({ username : this . email , password : this . password }) } catch ( e ) { this . error = '\u041e\u0448\u0438\u0431\u043a\u0430! \u041d\u0435\u0432\u0435\u0440\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u043d email \u0438\u043b\u0438 \u043f\u0430\u0440\u043e\u043b\u044c.' return } this . $router . push ( '/lk' ) }, } } < /script> EventCard.vue - Events cards < template > < div class = \"col-4\" > < div class = \"card h-100\" : event_id = \"id\" > < img : src = \"photo\" class = \"card-img-top img-fluid\" : alt = \"title\" > < div class = \"card-header d-flex justify-content-between align-content-center form-color\" > < a class = \"btn my-btn-outline-secondary btn-sm col-6\" > < svg class = \"icon m-1\" > < use xlink : href = \"#tag\" >< /use> < /svg>{{ category }}</a> < p class = \"card-text text col-4 text-center\" > {{ date }} {{ time }} < /p> < /div> < div class = \"card-body text-center d-flex flex-column justify-content-around p-3 form-color\" > < h5 class = \"card-title text\" > {{ title }} < /h5> < div class = \"card-text d-flex justify-content-around text\" > < p class = \"card-text text\" > < svg class = \"icon m-1\" > < use xlink : href = \"#place\" >< /use> < /svg>{{ place }}</p> < p class = \"card-text text-success\" > {{ price }} < /p> < /div> < div class = \"card-text d-flex justify-content-around \" > < RouterLink : to = \"`/events/${id}`\" class = \"text-black nav-link\" > < a href = \"#\" class = \"btn align-self-center btn-success\" > More detailed ... < /a> < /RouterLink> < /div> < /div> < /div> < /div> < /template> < script > export default { name : \"EventCard\" , props : { id : { type : Number , required : true }, title : { type : String , required : true }, price : { type : String , required : true }, photo : { type : String , required : true }, category : { type : String , required : true }, district : { type : String , required : true }, place : { type : String , required : true }, type_event : { type : String , required : true }, date : { type : String , required : true }, time : { type : String , required : true }, description : { type : String } }, } < /script> ListEvents.vue - Events list < template > < div class = \"container p-3\" > < div v - for = \"(eventRow, eventRowIndex) in eventRows\" : key = \"`event-row-${eventRowIndex}`\" class = \"event-row row py-2\" > < EventCard v - for = \"(event) in eventRow\" : key = \"`event-${event.id}`\" : id = \"event.id\" : photo = \"event.photo\" : title = \"event.title\" : price = \"event.price\" : category = \"event.category\" : district = \"event.district\" : place = \"event.place\" : type_event = \"event.type_event\" : date = \"event.date\" : time = \"event.time\" /> < /div> < /div> < /template> < script > import { mapActions , mapState } from 'pinia' import useEventsStore from \"@/stores/event\" ; import EventCard from \"./EventCard.vue\" ; export default { name : \"ListEvents\" , components : { EventCard }, computed : { ... mapState ( useEventsStore , [ 'events' ]), eventRows () { return this . getEventsRows ( 3 ) }, }, methods : { ... mapActions ( useEventsStore , [ 'fetchEvents' ]), getEventsRows ( rowSize ) { const eventRows = []; for ( let i = 0 ; i < this . events . length ; i += rowSize ) { const row = this . events . slice ( i , i + rowSize ); eventRows . push ( row ); } return eventRows ; }, }, mounted () { this . fetchEvents () } } < /script> EventInfo.vue - Detailed information about the event < template > < section class = \"container col-8 justify-content-center py-3 min-vh-100 form-color\" > < div class = \"d-flex flex-row\" > < img : src = \"event.photo\" : alt = \"event.title\" class = \"img-fluid\" style = \"max-height: 300px; width: auto;\" > < div class = \"d-flex flex-column p-2 \" > < h2 class = \"text-center\" > {{ event . title }} < /h2> < dl class = \"row p-4\" > < dt class = \"col-sm-7\" > Date of the event :< /dt> < dd class = \"col-sm-5\" > {{ event . date }} < /dd> < dt class = \"col-sm-7\" > Time of the event :< /dt> < dd class = \"col-sm-5\" > {{ event . time }} < /dd> < dt class = \"col-sm-7\" > Location of event :< /dt> < dd class = \"col-sm-5\" > {{ event . place }} < /dd> < dt class = \"col-sm-7\" > Price :< /dt> < dd class = \"col-sm-5\" > {{ event . price }} < /dd> < /dl> < /div> < /div> < section class = \"py-3 px-1 mb-3\" > < div v - if = \"event.description\" > < h4 class = \"mb-2\" > Description : < /h4> < p > {{ event . description }} < /p> < /div> < div v - if = \"event.contact_number\" > < h4 class = \"mb-2\" > Contacts : < /h4> < p > {{ event . contact_number }} {{ event . contact_name }} < /p> < /div> < div class = \"d-flex justify-content-center\" > < button type = \"button\" class = \"btn btn-success d-flex justify-content-center\" data - bs - toggle = \"modal\" data - bs - target = \"#exampleModal\" @ click = \"addUserEvent\" > Sign up for an event < /button> < /div> <!-- Modal --> < div class = \"modal fade\" id = \"exampleModal\" tabindex = \"-1\" aria - labelledby = \"exampleModalLabel\" aria - hidden = \"true\" > < div class = \"modal-dialog\" > < div class = \"modal-content\" > < div class = \"modal-header\" > < h5 class = \"modal-title\" id = \"exampleModalLabel\" > Congratulations !< /h5> < button type = \"button\" class = \"btn-close\" data - bs - dismiss = \"modal\" aria - label = \"Close\" >< /button> < /div> < div class = \"modal-body\" > < p > You have successfully signed up for this event !< /p> < /div> < div class = \"modal-footer\" > < button type = \"button\" class = \"btn btn-secondary\" data - bs - dismiss = \"modal\" > \u0417\u0430\u043a\u0440\u044b\u0442\u044c < /button> < /div> < /div> < /div> < /div> < /section> < div class = \"d-flex justify-content-center\" v - if = \"event.map\" > < iframe : src = \"event.map\" width = \"700\" height = \"400\" frameborder = \"0\" title = \"map\" >< /iframe> < /div> < /section> < /template> < script > import { mapState , mapActions } from \"pinia\" import useEventsStore from \"@/stores/event\" ; import useUserEventsStore from \"@/stores/users_events\" ; import useUserStore from \"@/stores/user\" ; export default { name : \"EventInfo\" , computed : { ... mapState ( useEventsStore , [ 'event' , 'events' ]), ... mapState ( useUserEventsStore , [ 'userEvents' ]), ... mapState ( useUserStore , [ 'token' ]), }, mounted () { this . fetchEvent ( this . $route . params . id ) this . $watch ( () => this . $route . params , ( toParams ) => { this . fetchEvent ( toParams . id ) } ) }, methods : { ... mapActions ( useEventsStore , [ 'fetchEvent' ]), ... mapActions ( useUserEventsStore , [ 'fetchUsersEvents' , 'addUsersEvents' ]), addUserEvent () { this . addUsersEvents ( this . event . id , this . token ). then (() => { this . fetchUsersEvents ( this . token ) }) }, } } < /script> UserEventCard.vue - Event card for which the user is registered < template > < div class = \"row col-10 g-0 mb-3 border\" > < div class = \"col-md-4 d-flex align-items-center form-color\" > < img : src = \"event_id.photo\" class = \"img-fluid \" : alt = \"event_id.title\" > < /div> < div class = \"col-md-8 d-flex flex-column justify-content-around form-color\" > < div class = \"card-header d-flex justify-content-between p-4\" > < a class = \"btn my-btn-outline-secondary btn-sm\" role = \"button\" > < svg class = \"icon m-1\" width = \"20\" height = \"20\" > < use xlink : href = \"#tag\" >< /use> < /svg>{{ event_id.category }}</a> < p class = \"card-text text\" > {{ event_id . date }} {{ event_id . time }} < /p> < /div> < div class = \"card-body text-center d-flex flex-column justify-content-around form-color\" > < h5 class = \"card-title text\" > {{ event_id . title }} < /h5> < div class = \"card-text text d-flex justify-content-around\" > < p class = \"card-location text\" > < svg class = \"icon m-1\" width = \"20\" height = \"20\" > < use xlink : href = \"#place\" >< /use> < /svg>{{ event_id.place }}</p> < p class = \"card-cost\" > {{ event_id . price }} < /p> < /div> < form class = \"flex-column justify-content-around\" > < RouterLink : to = \"`/events/${event_id.id}`\" class = \"text-black nav-link\" > < a href = \"#\" class = \"btn btn-success col-5 align-self-center mb-1\" > More detailed ... < /a> < /RouterLink> < a href = \"#\" class = \"btn btn-danger col-5 align-self-center mb-1\" @ click = \"removeEvent(id)\" > Cancel recording < /a> < /form> < /div> < /div> < /div> < /template> < script > import { mapActions , mapState } from \"pinia\" ; import useUserEventsStore from \"@/stores/users_events\" ; import useUserStore from \"@/stores/user\" ; export default { name : \"UserEventCard\" , props : { id : { type : Number , required : true }, event_id : { id : { type : Number , required : true }, title : { type : String , required : true }, price : { type : String , required : true }, photo : { type : String , required : true }, district : { type : String , required : true }, place : { type : String , required : true }, date : { type : String , required : true }, time : { type : String , required : true }, }, }, computed : { ... mapState ( useUserEventsStore , [ 'userEvents' ]), ... mapState ( useUserStore , [ 'token' ]), }, methods : { ... mapActions ( useUserEventsStore , [ 'fetchUsersEvents' , 'removeUsersEvent' ]), removeEvent ( id ) { this . removeUsersEvent ( id , this . token ). then (() => { this . fetchUsersEvents ( this . token ) }) }, }, } < /script> MyEvents.vue - List of user events in personal account < template > < div class = \"col row-1 col-12 g-4 py-3\" > < UserEventCard v - for = \"(event) in userEvents\" : key = \"`user-event-${event.id}`\" : id = \"event.id\" : event_id = \"event.event_id\" /> < /div> < /template> < script > import { mapActions , mapState } from 'pinia' import useUserEventsStore from \"@/stores/users_events\" ; import useUserStore from \"@/stores/user\" ; import UserEventCard from \"./UserEventCard.vue\" ; export default { name : \"MyEvents\" , components : { UserEventCard }, computed : { ... mapState ( useUserEventsStore , [ 'userEvents' ]), ... mapState ( useUserStore , [ 'token' ]), }, methods : { ... mapActions ( useUserEventsStore , [ 'fetchUsersEvents' ]), }, mounted () { this . fetchUsersEvents ( this . token ) } } < /script> router index.js import { createRouter , createWebHistory } from 'vue-router' const router = createRouter ({ history : createWebHistory ( import . meta . env . BASE_URL ), routes : [ { path : '/registration' , name : 'registration' , component : () => import ( '../views/RegisterView.vue' ) }, { path : '/login' , name : 'login' , component : () => import ( '../views/LogInView.vue' ) }, { path : '/' , name : 'main' , component : () => import ( '../views/MainView.vue' ) }, { path : '/lk' , name : 'lk' , component : () => import ( '../views/LkView.vue' ) }, { path : '/lk/data' , name : 'lk_data' , component : () => import ( '../views/LkData.vue' ) }, { path : '/events/:id' , name : 'eventInfo' , props : true , component : () => import ( '../views/CardView.vue' ) }, { path : '/calendar' , name : 'calendar' , component : () => import ( '../views/CalendarView.vue' ) } ] }) export default router api index.js import instance from \"../api/instance\" import UserAPI from \"../api/user\" import EventsAPI from \"../api/event\" import UsersEventsAPI from \"../api/users_events\" const userAPI = new UserAPI ( instance ) const eventsAPI = new EventsAPI ( instance ) const userEventsAPI = new UsersEventsAPI ( instance ) export { userAPI , eventsAPI , userEventsAPI } user.js - User class UserAPI { constructor ( instance ) { this . API = instance } login = async ( data ) => { return this . API ({ method : 'POST' , url : '/auth/token/login/' , data , headers : { 'Content-Type' : 'application/json' } }) } register = async ( data ) => { return this . API ({ method : 'POST' , url : '/auth/users/' , data , headers : { 'Content-Type' : 'application/json' } }) } logout = async ( token ) => { return this . API ({ method : 'POST' , url : '/auth/token/logout/' , headers : { 'Authorization' : `Token ${ token } ` } }) } currentUserInfo = async ( token ) => { return this . API ({ url : '/auth/users/me/' , headers : { 'Authorization' : `Token ${ token } ` } }) } } export default UserAPI instance.js import axios from 'axios' const apiURL = 'http://127.0.0.1:8000' const token = localStorage . getItem ( 'token' ) const instance = axios . create ({ baseURL : apiURL , }) if ( token ){ instance . defaults . headers . common [ 'Authorization' ] = \"Token \" + token ; } export default instance events.js class EventsAPI { constructor ( instance ) { this . API = instance } fetchEvent = async ( id ) => { return this . API ({ url : `/api/v1/events/ ${ id } ` }) } fetchEvents = async ( id ) => { return this . API ({ url : `/api/v1/events` }) } fetchEventsByCategory = async ( category ) => { if ( category === '' ) { return this . fetchEvents (); } return this . API ({ url : `/api/v1/events?category= ${ category } ` }) } fetchEventsByCategoryDistrictType = async ( category , district , type_event ) => { if (( category === '' ) && ( district === '' ) && ( type_event === '' )) { return this . fetchEvents (); } return this . API ({ url : `/api/v1/events?category= ${ category } &district= ${ district } &type_event= ${ type_event } ` }) } } export default EventsAPI user_events.js - User events class UsersEventsAPI { constructor ( instance ) { this . API = instance } fetchUsersEvents = async ( token ) => { return this . API ({ url : '/api/v1/users_events' , headers : { 'Authorization' : `Token ${ token } ` } }) } addUsersEvents = async ( data , token ) => { return this . API ({ method : 'POST' , url : '/api/v1/users_events/add' , data , headers : { 'Content-Type' : 'application/json' , 'Authorization' : `Token ${ token } ` } }) } removeUsersEvent = async ( id , token ) => { return this . API ({ method : 'DELETE' , url : `/api/v1/users_events/ ${ id } ` , headers : { 'Content-Type' : 'application/json' , 'Authorization' : `Token ${ token } ` } }) } } export default UsersEventsAPI stores index.js import { persist } from 'pinia-persists' import { createPinia } from 'pinia' const pinia = createPinia () pinia . use ( persist ()) export default pinia event.js - Evenements import { defineStore } from 'pinia' import { eventsAPI } from '../api' const useEventsStore = defineStore ( 'events' , { state : () => ({ events : [], categoryFilter : '' , districtFilter : '' , typeFilter : '' , event : {} }), actions : { async fetchEvents () { const response = await eventsAPI . fetchEvents () this . events = response . data return response }, async fetchEvent ( id ) { const response = await eventsAPI . fetchEvent ( id ) this . event = response . data return response }, async fetchEventsByCategoryDistrictType ( category , district , type_event ) { this . categoryFilter = category === this . categoryFilter ? '' : category ; this . districtFilter = district === this . districtFilter ? '' : district ; this . typeFilter = type_event === this . typeFilter ? '' : type_event ; const response = await eventsAPI . fetchEventsByCategoryDistrictType ( this . categoryFilter , this . districtFilter , this . typeFilter ) this . events = response . data return response } } }) export default useEventsStore user.js - User import { defineStore } from 'pinia' import { userAPI } from '../api' const useUserStore = defineStore ( 'user' , { state : () => ({ user : {}, token : null , }), actions : { setToken ( token ) { this . token = token || null }, async login ( data ) { const response = await userAPI . login ( data ) this . token = response ? . data ? . auth_token || null if ( this . token ) { localStorage . setItem ( \"token\" , this . token ) } return response }, async register ( user ) { const response = await userAPI . register ( user ) return response }, async logout () { let response = null if ( this . token ) { response = await userAPI . logout ( this . token ) if ( response . status === 204 ) { window . localStorage . removeItem ( 'token' ) this . token = '' ; this . user = {}; } } return response }, async currentUserInfo () { let response = null if ( this . token ) { response = await userAPI . currentUserInfo ( this . token ) this . user = response . data ? . username ? response . data : {} } return this . user }, }, }) export default useUserStore views MainView.vue - Home page < template > < Header /> < div class = \"min-vh-100 color-main\" > < Filter /> < ListEvents /> < /div> < Footer /> < /template> < script > import Header from \"../components/Header.vue\" ; import Footer from \"../components/Footer.vue\" ; import Filter from \"../components/Filter.vue\" ; import EventCard from \"../components/EventCard.vue\" ; import ListEvents from \"../components/ListEvents.vue\" ; export default { name : \"MainView\" , components : { ListEvents , EventCard , Filter , Footer , Header }, } < /script> RegisterView.vue - Registration page import RegisterForm from \"../components/RegisterForm.vue\"; import Header from \"../components/Header.vue\"; export default { name: \"RegisterView\", components: {Header, RegisterForm} } * LogInView.vue - Login page ```js <template> <Header/> <div class=\"color-main min-vh-100\"> <LogIn /> </div> </template> <script> import LogIn from \"../components/LogInForm.vue\"; import Header from \"../components/Header.vue\"; import Footer from \"../components/Footer.vue\"; export default { name: \"LogInView\", components: {Footer, Header, LogIn}, } </script> * LkData.vue - Personal account, a page with user data < template > < Header /> < main class = \"p-5 container-fluid d-flex flex-row vh-100 color-main\" > < aside class = \"col-lg-3 d-flex flex-column justify-content-start\" > < img src = \"https://e7.pngegg.com/pngimages/398/54/png-clipart-silhouette-graphics-male-silhouette-animals-hand.png\" height = \"auto\" alt = \"\u0424\u043e\u0442\u043e \u043f\u0440\u043e\u0444\u0438\u043b\u044f\" class = \"img-fluid img-thumbnail\" > < ul class = \"list-group col-12\" > < li class = \"list-group-item list-group-item-secondary\" > < a class = \"text-decoration-none link-dark active\" aria - current = \"true\" href = \"#\" > \u041c\u043e\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 < /a> < /li> < li class = \"list-group-item form-color\" > < a class = \"text-decoration-none text \" href = \"#\" @ click = \"$router.push('/lk/')\" > \u041c\u043e\u0438 \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u044f < /a> < /li> < li class = \"list-group-item form-color\" > < a class = \"text-danger text-decoration-none link-dark\" href = \"#\" @ click = \"Logout\" > \u0412\u044b\u0439\u0442\u0438 < /a> < /li> < /ul> < /aside> < section class = \"col-lg-6 px-5\" > < h2 class = \"text\" > \u041c\u043e\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 < /h2> < div class = \"row mt-4 \" > < ul class = \"list-group \" > < li class = \"list-group-item form-color\" > \u0418\u043c\u044f : {{ user . first_name }} < /li> < li class = \"list-group-item form-color\" > \u0424\u0430\u043c\u0438\u043b\u0438\u044f : {{ user . last_name }} < /li> < li class = \"list-group-item form-color\" > ID : {{ user . id }} < /li> < li class = \"list-group-item form-color\" > Email : {{ user . email }} < /li> < li class = \"list-group-item form-color\" > Username : {{ user . username }} < /li> < /ul> < /div> < /section> < /main> < Footer /> < /template> < script > import { mapState , mapActions } from 'pinia' import useUserStore from '@/stores/user' import Header from \"../components/Header.vue\" ; import Footer from \"../components/Footer.vue\" ; export default { name : \"LkData\" , components : { Footer , Header }, computed : { ... mapState ( useUserStore , [ 'user' , 'token' ]), }, mounted () { this . currentUserInfo (). then ( result => { if ( ! result ? . email ) { this . $router . replace ({ path : '/' }) } }) }, methods : { ... mapActions ( useUserStore , [ 'currentUserInfo' , 'logout' ]), async Logout () { await this . logout () this . $router . push ( '/' ) } } } < /script> * LkView.vue - Personal account, events page < template > < Header /> < main class = \"p-5 container-fluid d-flex flex-row vh-100 color-main\" > < aside class = \"col-lg-3 d-flex flex-column justify-content-start\" > < img src = \"https://e7.pngegg.com/pngimages/398/54/png-clipart-silhouette-graphics-male-silhouette-animals-hand.png\" height = \"auto\" alt = \"\u0424\u043e\u0442\u043e \u043f\u0440\u043e\u0444\u0438\u043b\u044f\" class = \"img-fluid img-thumbnail\" > < ul class = \"list-group col-12 text\" > < li class = \"list-group-item form-color\" > < a class = \"text-decoration-none text\" href = \"#\" @ click = \"$router.push('/lk/data')\" > \u041c\u043e\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 < /a> < /li> < li class = \"list-group-item list-group-item-secondary\" > < a class = \"text-decoration-none active link-dark\" aria - current = \"true\" href = \"#\" > \u041c\u043e\u0438 \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u044f < /a> < /li> < li class = \"list-group-item form-color\" > < a class = \"text-danger text-decoration-none \" href = \"#\" @ click = \"Logout\" > \u0412\u044b\u0439\u0442\u0438 < /a> < /li> < /ul> < /aside> < section class = \"col-lg-9 px-5\" > < h2 class = \"text\" > \u041c\u043e\u0438 \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u044f < /h2> < MyEvents /> < /section> < /main> < Footer /> < /template> < script > import Header from \"../components/Header.vue\" ; import Footer from \"../components/Footer.vue\" ; import MyEvents from \"../components/MyEvents.vue\" ; import { mapActions , mapState } from \"pinia\" ; import useUserStore from '@/stores/user' export default { name : \"LkView\" , components : { MyEvents , Footer , Header }, computed : { ... mapState ( useUserStore , [ 'token' ]) }, mounted () { this . setToken ( window . localStorage . getItem ( 'token' )) }, methods : { ... mapActions ( useUserStore , [ 'setToken' , 'logout' ]), async Logout () { await this . logout () this . $router . push ( '/' ) } } } < /script> * CardView.vue - Event information page < template > < Header /> < div class = \"color-main\" > < EventInfo /> < /div> < Footer /> < /template> < script > import Header from \"../components/Header.vue\" ; import Footer from \"../components/Footer.vue\" ; import EventInfo from \"../components/EventInfo.vue\" ; export default { name : \"CardView\" , components : { EventInfo , Footer , Header } } < /script> * CalendarView.vue - \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0441 \u043a\u0430\u043b\u0435\u043d\u0434\u0430\u0440\u0435\u043c \u0432\u0441\u0435\u0445 \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u0439 < template > < Header /> < div class = \"color-main text min-vh-100\" > < full - calendar : options = \"{ events: events, eventColor: '#089969', height: 575, width: 575, }\" /> < /div> < Footer /> < /template> < script > import { mapActions , mapState } from 'pinia' import useEventsStore from \"@/stores/event\" ; import Header from \"../components/Header.vue\" ; import Footer from \"../components/Footer.vue\" ; import FullCalendar from '../components/FullCalendar.vue' export default { name : \"CalendarView\" , components : { Footer , Header , FullCalendar }, computed : { ... mapState ( useEventsStore , [ 'events' ]), }, methods : { ... mapActions ( useEventsStore , [ 'fetchEvents' ]), }, mounted () { this . fetchEvents () } } < /script> For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 4"},{"location":"#4","text":"\u041c\u0438\u0433\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u043d\u0435\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0439 \u0441\u0430\u0439\u0442 \u043d\u0430 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a Vue.JS. \u0412\u0430\u0440\u0438\u0430\u043d\u0442: 2 \u041f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0430 \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0445 \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u0439 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u0451\u0440\u0441\u0442\u043a\u0443 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0441\u0442\u0440\u0430\u043d\u0438\u0446: \u0412\u0445\u043e\u0434 \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u041f\u043e\u0438\u0441\u043a \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u044f (\u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e \u0442\u0438\u043f\u0443 \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u044f, \u043c\u0435\u0441\u0442\u0443 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f) \u041a\u0430\u043b\u0435\u043d\u0434\u0430\u0440\u044c \u0431\u043b\u0438\u0436\u0430\u0439\u0448\u0438\u0445 \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u0439 \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u044f \u041b\u0438\u0447\u043d\u044b\u0439 \u043a\u0430\u0431\u0438\u043d\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0441\u043e \u0441\u043f\u0438\u0441\u043a\u043e\u043c \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u0439, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u043d \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u043b\u0441\u044f \u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f: \u0414\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0451\u043d \u0440\u043e\u0443\u0442\u0435\u0440 \u0414\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u0432\u043d\u0435\u0448\u043d\u0438\u043c API \u0420\u0430\u0437\u0443\u043c\u043d\u043e\u0435 \u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u0430 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b","title":"\u041b\u0410\u0411\u041e\u0420\u0410\u0422\u041e\u0420\u041d\u0410\u042f \u0420\u0410\u0411\u041e\u0422\u0410 4"},{"location":"#_1","text":"Models.py from django.db import models from django.contrib.auth.models import AbstractUser # Create your models here. class Event ( models . Model ): CATEGORY = [ ( \"\u0421\u043f\u043e\u0440\u0442 \u0438 \u0444\u0438\u0442\u043d\u0435\u0441\" , \"\u0421\u043f\u043e\u0440\u0442 \u0438 \u0444\u0438\u0442\u043d\u0435\u0441\" ), ( \"\u0418\u0441\u043a\u0443\u0441\u0441\u0442\u0432\u043e \u0438 \u043a\u0443\u043b\u044c\u0442\u0443\u0440\u0430\" , \"\u0418\u0441\u043a\u0443\u0441\u0441\u0442\u0432\u043e \u0438 \u043a\u0443\u043b\u044c\u0442\u0443\u0440\u0430\" ), ( \"\u041f\u0440\u0438\u0440\u043e\u0434\u0430\" , \"\u041f\u0440\u0438\u0440\u043e\u0434\u0430\" ), ( \"\u041a\u0430\u0440\u044c\u0435\u0440\u0430 \u0438 \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435\" , \"\u041a\u0430\u0440\u044c\u0435\u0440\u0430 \u0438 \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435\" ), ( \"\u0422\u0435\u0430\u0442\u0440\u044b\" , \"\u0422\u0435\u0430\u0442\u0440\u044b\" ), ( \"\u041a\u043e\u043d\u0446\u0435\u0440\u0442\u044b\" , \"\u041a\u043e\u043d\u0446\u0435\u0440\u0442\u044b\" ), ] TYPES_EVENTS = [ ( \"offline\" , \"\u041e\u0447\u043d\u043e\" ), ( \"online\" , \"\u041e\u043d\u043b\u0430\u0439\u043d\" ), ] DISTRICT = [ ( 'any' , '\u041b\u044e\u0431\u043e\u0439' ), ( \"admiral\" , \"\u0410\u0434\u043c\u0438\u0440\u0430\u043b\u0442\u0435\u0439\u0441\u043a\u0438\u0439\" ), ( \"vasileostrov\" , \"\u0412\u0430\u0441\u0438\u043b\u0435\u043e\u0441\u0442\u0440\u043e\u0432\u0441\u043a\u043e\u0439\" ), ( \"vyborg\" , \"\u0412\u044b\u0431\u043e\u0440\u0433\u0441\u043a\u0438\u0439\" ), ( \"kalininsk\" , \"\u041a\u0430\u043b\u0438\u043d\u0438\u043d\u0441\u043a\u0438\u0439\" ), ( \"kirov\" , \"\u041a\u0438\u0440\u043e\u0432\u0441\u043a\u0438\u0439\" ), ( \"krasnogvard\" , \"\u041a\u0440\u0430\u0441\u043d\u043e\u0433\u0432\u0430\u0440\u0434\u0435\u0439\u0441\u043a\u0438\u0439\" ), ( \"krasnosel\" , \"\u041a\u0440\u0430\u0441\u043d\u043e\u0441\u0435\u043b\u044c\u0441\u043a\u0438\u0439\" ), ( \"kronshtad\" , \"\u041a\u0440\u043e\u043d\u0448\u0442\u0430\u0434\u0441\u043a\u0438\u0439\" ), ( \"moskovsk\" , \"\u041c\u043e\u0441\u043a\u043e\u0432\u0441\u043a\u0438\u0439\" ), ( \"nevsk\" , \"\u041d\u0435\u0432\u0441\u043a\u0438\u0439\" ), ( \"petrograd\" , \"\u041f\u0435\u0442\u0440\u043e\u0433\u0440\u0430\u0434\u0441\u043a\u0438\u0439\" ), ( \"center\" , \"\u0426\u0435\u043d\u0442\u0440\u0430\u043b\u044c\u043d\u044b\u0439\" ), ] name = models . CharField ( max_length = 100 ) category = models . CharField ( max_length = 30 , choices = CATEGORY ) place = models . CharField ( max_length = 100 ) date = models . DateTimeField () price = models . CharField ( max_length = 50 ) photo = models . CharField ( max_length = 100 ) type_event = models . CharField ( max_length = 10 , choices = TYPES_EVENTS ) district = models . CharField ( max_length = 20 , choices = DISTRICT ) description = models . TextField ( blank = True ) contact_number = models . CharField ( max_length = 12 , blank = True ) contact_name = models . CharField ( max_length = 50 , blank = True ) map = models . TextField ( blank = True ) def __str__ ( self ): return self . name class User ( AbstractUser ): last_name = models . CharField ( max_length = 50 ) first_name = models . CharField ( max_length = 50 ) email = models . CharField ( max_length = 50 ) REQUIRED_FIELDS = [ 'last_name' , 'first_name' , 'email' ] class UsersEvents ( models . Model ): user_id = models . ForeignKey ( User , on_delete = models . CASCADE , related_name = 'reg_user' ) event_id = models . ForeignKey ( Event , on_delete = models . CASCADE , related_name = 'reg_event' ) views.py from django.shortcuts import render from rest_framework import views , permissions from rest_framework.generics import ListAPIView , RetrieveUpdateAPIView , CreateAPIView , RetrieveAPIView , DestroyAPIView from .serializers import * from .models import * from django.db.models import Count from rest_framework.response import Response class EventsList ( ListAPIView ): serializer_class = EventSerializer def get_queryset ( self ): queryset = Event . objects . all () category = self . request . query_params . get ( 'category' ) district = self . request . query_params . get ( 'district' ) type_event = self . request . query_params . get ( 'type_event' ) if ( type_event is not None ) and ( type_event != '' ): queryset = queryset . filter ( type_event = type_event ) if ( category is not None ) and ( category != '' ): queryset = queryset . filter ( category = category ) if ( district is not None ) and ( district != '' ): queryset = queryset . filter ( district = district ) return queryset class EventRetrieve ( RetrieveAPIView ): serializer_class = EventSerializer queryset = Event . objects . all () class UserList ( ListAPIView ): serializer_class = UserSerializer queryset = Event . objects . all () class UserCreate ( CreateAPIView ): serializer_class = UserSerializer queryset = Event . objects . all () class UserRetrieve ( RetrieveUpdateAPIView ): serializer_class = UserSerializer queryset = Event . objects . all () class UserEventsList ( ListAPIView ): def get ( self , request ): user_events = UsersEvents . objects . filter ( user_id = request . user . id ) serializer = UserEventsSerializer ( user_events , many = True ) return Response ({ \"user_events\" : serializer . data }) class RegisterUserOnEvent ( views . APIView ): def post ( self , request ): event_id = request . data . get ( 'event' ) event = Event . objects . get ( id = event_id ) user_event = UsersEvents . objects . create ( user_id = request . user , event_id = event ) user_event . save () return Response ({ \"Success\" : \"Registration user on event {} done succesfully\" . format ( user_event . id )}) class DeleteUserEvent ( DestroyAPIView ): serializer_class = UserOnEventSerializer queryset = UsersEvents . objects . all () serializers.py from rest_framework import serializers from .models import * class EventSerializer ( serializers . ModelSerializer ): class Meta : model = Event fields = \"__all__\" class UserSerializer ( serializers . ModelSerializer ): class Meta : model = User fields = \"__all__\" class UserOnEventSerializer ( serializers . ModelSerializer ): class Meta : model = UsersEvents fields = \"__all__\" class UserEventsSerializer ( serializers . ModelSerializer ): event_id = EventSerializer () class Meta : model = UsersEvents fields = ( \"id\" , \"event_id\" ) urls.py from django.urls import path from .views import * urlpatterns = [ path ( 'events' , EventsList . as_view ()), path ( 'events/<int:pk>' , EventRetrieve . as_view ()), path ( 'users' , UserList . as_view ()), path ( 'users/<int:pk>' , UserRetrieve . as_view ()), path ( 'users_events' , UserEventsList . as_view ()), path ( 'users_events/add' , RegisterUserOnEvent . as_view ()), path ( 'users_events/<int:pk>' , DeleteUserEvent . as_view ()) ]","title":"\u0431\u044d\u043a\u0435\u043d\u0434: \u0424\u0430\u0439\u043b\u044b \u0441 \u043a\u043e\u0434\u043e\u043c"},{"location":"#front-end-vuejs","text":"components Header.vue < template > < svg xmlns = \"http://www.w3.org/2000/svg\" xmlns : xlink = \"http://www.w3.org/1999/xlink\" display = \"none\" > < symbol id = \"login\" fill = \"currentColor\" class = \"bi bi-box-arrow-in-right\" viewBox = \"0 0 16 16\" > < path fill - rule = \"evenodd\" d = \"M6 3.5a.5.5 0 0 1 .5-.5h8a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-8a.5.5 0 0 1-.5-.5v-2a.5.5 0 0 0-1 0v2A1.5 1.5 0 0 0 6.5 14h8a1.5 1.5 0 0 0 1.5-1.5v-9A1.5 1.5 0 0 0 14.5 2h-8A1.5 1.5 0 0 0 5 3.5v2a.5.5 0 0 0 1 0v-2z\" /> < path fill - rule = \"evenodd\" d = \"M11.854 8.354a.5.5 0 0 0 0-.708l-3-3a.5.5 0 1 0-.708.708L10.293 7.5H1.5a.5.5 0 0 0 0 1h8.793l-2.147 2.146a.5.5 0 0 0 .708.708l3-3z\" /> < /symbol> < symbol id = \"signup\" fill = \"currentColor\" class = \"bi bi-key\" viewBox = \"0 0 16 16\" > < path d = \"M0 8a4 4 0 0 1 7.465-2H14a.5.5 0 0 1 .354.146l1.5 1.5a.5.5 0 0 1 0 .708l-1.5 1.5a.5.5 0 0 1-.708 0L13 9.207l-.646.647a.5.5 0 0 1-.708 0L11 9.207l-.646.647a.5.5 0 0 1-.708 0L9 9.207l-.646.647A.5.5 0 0 1 8 10h-.535A4 4 0 0 1 0 8zm4-3a3 3 0 1 0 2.712 4.285A.5.5 0 0 1 7.163 9h.63l.853-.854a.5.5 0 0 1 .708 0l.646.647.646-.647a.5.5 0 0 1 .708 0l.646.647.646-.647a.5.5 0 0 1 .708 0l.646.647.793-.793-1-1h-6.63a.5.5 0 0 1-.451-.285A3 3 0 0 0 4 5z\" /> < path d = \"M4 8a1 1 0 1 1-2 0 1 1 0 0 1 2 0z\" /> < /symbol> < symbol id = \"log_out\" fill = \"currentColor\" class = \"bi bi-box-arrow-right\" viewBox = \"0 0 16 16\" > < path fill - rule = \"evenodd\" d = \"M10 12.5a.5.5 0 0 1-.5.5h-8a.5.5 0 0 1-.5-.5v-9a.5.5 0 0 1 .5-.5h8a.5.5 0 0 1 .5.5v2a.5.5 0 0 0 1 0v-2A1.5 1.5 0 0 0 9.5 2h-8A1.5 1.5 0 0 0 0 3.5v9A1.5 1.5 0 0 0 1.5 14h8a1.5 1.5 0 0 0 1.5-1.5v-2a.5.5 0 0 0-1 0v2z\" /> < path fill - rule = \"evenodd\" d = \"M15.854 8.354a.5.5 0 0 0 0-.708l-3-3a.5.5 0 0 0-.708.708L14.293 7.5H5.5a.5.5 0 0 0 0 1h8.793l-2.147 2.146a.5.5 0 0 0 .708.708l3-3z\" /> < /symbol> < symbol id = \"lk\" fill = \"currentColor\" class = \"bi bi-person-circle\" viewBox = \"0 0 16 16\" > < path d = \"M11 6a3 3 0 1 1-6 0 3 3 0 0 1 6 0z\" /> < path fill - rule = \"evenodd\" d = \"M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8zm8-7a7 7 0 0 0-5.468 11.37C3.242 11.226 4.805 10 8 10s4.757 1.225 5.468 2.37A7 7 0 0 0 8 1z\" /> < /symbol> < symbol id = \"calendar\" fill = \"currentColor\" class = \"bi bi-calendar3\" viewBox = \"0 0 16 16\" > < path d = \"M14 0H2a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2zM1 3.857C1 3.384 1.448 3 2 3h12c.552 0 1 .384 1 .857v10.286c0 .473-.448.857-1 .857H2c-.552 0-1-.384-1-.857V3.857z\" /> < path d = \"M6.5 7a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm3 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm3 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm-9 3a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm3 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm3 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm3 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm-9 3a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm3 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm3 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2z\" /> < /symbol> < symbol id = \"search\" fill = \"currentColor\" class = \"bi bi-search-heart\" viewBox = \"0 0 16 16\" > < path d = \"M6.5 4.482c1.664-1.673 5.825 1.254 0 5.018-5.825-3.764-1.664-6.69 0-5.018Z\" /> < path d = \"M13 6.5a6.471 6.471 0 0 1-1.258 3.844c.04.03.078.062.115.098l3.85 3.85a1 1 0 0 1-1.414 1.415l-3.85-3.85a1.007 1.007 0 0 1-.1-.115h.002A6.5 6.5 0 1 1 13 6.5ZM6.5 12a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11Z\" /> < /symbol> < symbol id = \"tag\" fill = \"currentColor\" class = \"bi bi-tag\" viewBox = \"0 0 16 16\" > < path d = \"M6 4.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm-1 0a.5.5 0 1 0-1 0 .5.5 0 0 0 1 0z\" /> < path d = \"M2 1h4.586a1 1 0 0 1 .707.293l7 7a1 1 0 0 1 0 1.414l-4.586 4.586a1 1 0 0 1-1.414 0l-7-7A1 1 0 0 1 1 6.586V2a1 1 0 0 1 1-1zm0 5.586 7 7L13.586 9l-7-7H2v4.586z\" /> < /symbol> < symbol id = \"place\" fill = \"currentColor\" class = \"bi bi-geo-alt\" viewBox = \"0 0 16 16\" > < path d = \"M12.166 8.94c-.524 1.062-1.234 2.12-1.96 3.07A31.493 31.493 0 0 1 8 14.58a31.481 31.481 0 0 1-2.206-2.57c-.726-.95-1.436-2.008-1.96-3.07C3.304 7.867 3 6.862 3 6a5 5 0 0 1 10 0c0 .862-.305 1.867-.834 2.94zM8 16s6-5.686 6-10A6 6 0 0 0 2 6c0 4.314 6 10 6 10z\" /> < path d = \"M8 8a2 2 0 1 1 0-4 2 2 0 0 1 0 4zm0 1a3 3 0 1 0 0-6 3 3 0 0 0 0 6z\" /> < /symbol> < /svg> < nav class = \"navbar navbar-expand-lg navbar-dark\" > < div class = \"container-fluid\" > < a class = \"navbar-brand\" href = \"#\" > < img src = \"./icons/icons8-monogramme-moyen.gif\" alt = \"\u041b\u043e\u0433\u043e\" width = \"30\" height = \"24\" class = \"d-inline-block align-text-top\" > EvenementTable < /a> < button class = \"navbar-toggler\" type = \"button\" data - bs - toggle = \"collapse\" data - bs - target = \"#navbarNavAltMarkup\" aria - controls = \"navbarNavAltMarkup\" aria - expanded = \"false\" aria - label = \"Toggle navigation\" > < span class = \"navbar-toggler-icon\" >< /span> < /button> < div class = \"collapse navbar-collapse\" id = \"navbarNavAltMarkup\" > < div class = \"navbar-nav\" > < a class = \"nav-link active\" aria - current = \"page\" href = \"#\" @ click = \"$router.push('/')\" > < svg class = \"icon m-1\" > < use xlink : href = \"#search\" >< /use> < /svg> Search for events < /a> < /div> < div class = \"navbar-nav\" > < a class = \"nav-link active\" aria - current = \"page\" href = \"#\" @ click = \"$router.push('/calendar')\" > < svg class = \"icon m-1\" > < use xlink : href = \"#calendar\" >< /use> < /svg> Calendar of events < /a> < /div> < /div> < form v - if = \"!token\" class = \"justify-content-end\" > < a class = \"btn btn-light me-2\" href = \"#\" role = \"button\" id = \"enter\" @ click = \"$router.push('/login/')\" > < svg class = \"icon m-1\" > < use xlink : href = \"#login\" >< /use> < /svg> Login < /a> < a class = \"btn btn-sm btn-outline-light\" role = \"button\" id = \"registr\" href = \"#\" @ click = \"$router.push('/registration/')\" > < svg class = \"icon m-1\" > < use xlink : href = \"#signup\" >< /use> < /svg> Sign up < /a> < /form> < form v - else class = \"justify-content-end\" > < button class = \"btn btn-light me-2\" type = \"button\" id = \"enterlk\" @ click = \"$router.push('/lk/')\" > < svg class = \"icon m-1\" > < use xlink : href = \"#lk\" >< /use> < /svg>Personal account</button> < a class = \"btn btn-sm btn-outline-light\" href = \"#\" role = \"button\" id = \"logout\" @ click = \"Logout\" > < svg class = \"icon m-1\" > < use xlink : href = \"#log_out\" >< /use> < /svg>Exit</a> < /form> < /div> < /nav> < /template> < script > import { mapState , mapActions } from 'pinia' ; import useUserStore from '@/stores/user' export default { name : 'Header' , computed : { ... mapState ( useUserStore , [ 'token' ]) }, mounted () { this . setToken ( window . localStorage . getItem ( 'token' )) }, methods : { ... mapActions ( useUserStore , [ 'setToken' , 'logout' ]), async Logout () { await this . logout () this . $router . push ( '/' ) } } } < /script> Filter.vue: Filters for the main page < template > < div class = \"container d-flex p-3 justify-content-center h2 text\" > Find a suitable event < /div> < div class = \"container d-grid gap-2 d-md-flex justify-content-center\" > < div class = \"row\" > < div class = \"form col-12 col-sm-6 col-lg-3 col-md-5 col-xl-3 \" > < select class = \"form-select event-region form-color\" aria - label = \".form-select-lg example\" id = \"district\" v - model = \"district\" > < option value = \"\" > \u0420\u0430\u0439\u043e\u043d < /option> < option value = \"admiral\" > \u0410\u0434\u043c\u0438\u0440\u0430\u043b\u0442\u0435\u0439\u0441\u043a\u0438\u0439 < /option> < option value = \"vasileostrov\" > \u0412\u0430\u0441\u0438\u043b\u0435\u043e\u0441\u0442\u0440\u043e\u0432\u0441\u043a\u0438\u0439 < /option> < option value = \"vyborg\" > \u0412\u044b\u0431\u043e\u0440\u0433\u0441\u043a\u0438\u0439 < /option> < option value = \"kalininsk\" > \u041a\u0430\u043b\u0438\u043d\u0438\u043d\u0441\u043a\u0438\u0439 < /option> < option value = \"kirov\" > \u041a\u0438\u0440\u043e\u0432\u0441\u043a\u0438\u0439 < /option> < option value = \"krasnogvard\" > \u041a\u0440\u0430\u0441\u043d\u043e\u0433\u0432\u0430\u0440\u0434\u0435\u0439\u0441\u043a\u0438\u0439 < /option> < option value = \"krasnosel\" > \u041a\u0440\u0430\u0441\u043d\u043e\u0441\u0435\u043b\u044c\u0441\u043a\u0438\u0439 < /option> < option value = \"kronshtad\" > \u041a\u0440\u043e\u043d\u0448\u0442\u0430\u0434\u0441\u043a\u0438\u0439 < /option> < option value = \"moskov\" > \u041c\u043e\u0441\u043a\u043e\u0432\u0441\u043a\u0438\u0439 < /option> < option value = \"nevsk\" > \u041d\u0435\u0432\u0441\u043a\u0438\u0439 < /option> < option value = \"petrograd\" > \u041f\u0435\u0442\u0440\u043e\u0433\u0440\u0430\u0434\u0441\u043a\u0438\u0439 < /option> < option value = \"center\" > \u0426\u0435\u043d\u0442\u0440\u0430\u043b\u044c\u043d\u044b\u0439 < /option> < /select> < /div> < div class = \"form col-12 col-sm-6 col-lg-3 col-md-5 col-xl-3\" > < select class = \"form-select event-category form-color\" aria - label = \".form-select-lg example\" id = \"category\" v - model = \"category\" > < option value = \"\" > \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f < /option> < option value = \"\u0422\u0435\u0430\u0442\u0440\u044b\" > \u0422\u0435\u0430\u0442\u0440\u044b < /option> < option value = \"\u041a\u043e\u043d\u0446\u0435\u0440\u0442\u044b\" > \u041a\u043e\u043d\u0446\u0435\u0440\u0442\u044b < /option> < option value = \"\u0418\u0433\u0440\u044b\" > \u0418\u0433\u0440\u044b < /option> < option value = \"\u0421\u043f\u043e\u0440\u0442 \u0438 \u0444\u0438\u0442\u043d\u0435\u0441\" > \u0421\u043f\u043e\u0440\u0442 \u0438 \u0444\u0438\u0442\u043d\u0435\u0441 < /option> < option value = \"\u0418\u0441\u0441\u043a\u0443\u0441\u0442\u0432\u043e \u0438 \u043a\u0443\u043b\u044c\u0442\u0443\u0440\u0430\" > \u0418\u0441\u0441\u043a\u0443\u0441\u0442\u0432\u043e \u0438 \u043a\u0443\u043b\u044c\u0442\u0443\u0440\u0430 < /option> < option value = \"\u041a\u0430\u0440\u044c\u0435\u0440\u0430 \u0438 \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435\" > \u041a\u0430\u0440\u044c\u0435\u0440\u0430 \u0438 \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 < /option> < /select> < /div> < div class = \"form col-12 col-sm-6 col-lg-3 col-md-5 col-xl-3\" > < select class = \"form-select type-event form-color\" aria - label = \".form-select-lg example\" id = \"type-event\" v - model = \"type_event\" > < option value = \"\" > \u041b\u044e\u0431\u043e\u0439 \u0442\u0438\u043f < /option> < option value = \"offline\" > \u041e\u0447\u043d\u043e < /option> < option value = \"online\" > \u041e\u043d\u043b\u0430\u0439\u043d < /option> < /select> < /div> < form class = \"col-lg-3 mb-3 search-form\" > < button class = \"btn my-btn-outline-secondary search-btn\" type = \"button\" id = \"button-search\" @ click = \"filterEvents\" > < svg class = \"icon m-1\" > < use xlink : href = \"#search\" >< /use> < /svg> Search < /button> < /form> < /div> < /div> < /template> < script > import { mapActions , mapState } from 'pinia' ; import useEventsStore from '@/stores/event' export default { name : \"Filter\" , data () { return { category : '' , district : '' , type_event : '' } }, computed : { ... mapState ( useEventsStore , [ 'events' , 'categoryFilter' , 'districtFilter' , 'typeFilter' ]), }, methods : { ... mapActions ( useEventsStore , [ 'fetchEventsByCategoryDistrictType' ]), filterEvents () { this . fetchEventsByCategoryDistrictType ( this . category , this . district , this . type_event ) } } } < /script> Footer.vue < template > < footer class = \"d-flex flex-wrap justify-content-between align-items-center py-3 border-top navbar-expand-lg navbar-dark navbar\" style = \"background-color: #20c957;\" > < p class = \"col-md-4 mb-0 text-white\" > \u00a9 2022 Traore Mamoudou , Inc < /p> < a href = \"/\" class = \"col-md-4 d-flex align-items-center justify-content-center mb-3 mb-md-0 me-md-auto link-dark text-white text-decoration-none\" > < img src = \"./icons/icons8-monogramme-moyen.gif\" alt = \"\u041b\u043e\u0433\u043e\" width = \"30\" height = \"24\" class = \"d-inline-block align-text-top \" > EvenementTable < /a> < ul class = \"nav col-md-4 justify-content-end navbar-nav\" > < li class = \"nav-item\" >< a href = \"#\" class = \"nav-link px-2\" > Home < /a></li> < li class = \"nav-item\" >< a href = \"#\" class = \"nav-link px-2\" > Features < /a></li> < li class = \"nav-item\" >< a href = \"#\" class = \"nav-link px-2\" > Pricing < /a></li> < li class = \"nav-item\" >< a href = \"#\" class = \"nav-link px-2\" > FAQs < /a></li> < li class = \"nav-item\" >< a href = \"#\" class = \"nav-link px-2\" > About < /a></li> < /ul> < /footer> < /template> < script > export default { name : \"Footer\" } < /script> RegisterForm.vue - Sign unp < template > < main > < div class = \"container col-md-6 p-5\" > < form @ submit . prevent = \"register\" > < div class = \"mb-3\" > < label for = \"first_name\" class = \"form-label text\" > Name :< /label> < input type = \"text\" class = \"form-control\" id = \"first_name\" name = \"first_name\" v - model = \"first_name\" > < /div> < div class = \"mb-3\" > < label for = \"last_name\" class = \"form-label text\" > family name :< /label> < input type = \"text\" class = \"form-control\" id = \"last_name\" name = \"last_name\" v - model = \"last_name\" > < /div> < div class = \"mb-3\" > < label for = \"email\" class = \"form-label text\" > Enter your e - mail :< /label> < input type = \"email\" class = \"form-control\" id = \"email\" name = \"email\" v - model = \"email\" > < /div> < div class = \"mb-3\" > < label for = \"password\" class = \"form-label text\" > Pick a password :< /label> < input type = \"password\" class = \"form-control\" id = \"password\" name = \"password\" v - model = \"password\" > < /div> < p v - if = \"error\" class = \"error text-danger\" > < strong > {{ error }} < /strong> < /p> < div class = \"p-4 d-flex justify-content-center\" > < button type = \"button\" class = \"btn btn-success mb-3\" @ click = \"reg\" > Register < /button> < /div> < /form> < div class = \"container d-flex\" > < p class = \"text\" > Already have an account ?< /p> < a href = \"#\" class = \"ms-2 text-success\" @ click = \"$router.push('/login/')\" > Login up < /a> < /div> < /div> < /main> < /template> < script > import { mapActions , mapState } from 'pinia' import router from '@/router' import useUserStore from '@/stores/user' export default { name : 'RegisterForm' , data () { return { first_name : \"\" , last_name : \"\" , email : \"\" , username : \"\" , password : \"\" , error : \"\" }; }, methods : { ... mapActions ( useUserStore , [ 'register' , 'login' ]), async reg () { this . error = '' if ( ! this . email || ! this . password ) { this . error = 'Error! Enter email and password.' return } let result try { result = await this . register ({ last_name : this . last_name , first_name : this . first_name , username : this . email , email : this . email , password : this . password }) } catch ( e ) { this . error = 'Error! Invalid email or password.' return } if ( result ? . status === 201 ) { await this . login ({ username : this . email , password : this . password }) this . $router . push ( '/lk' ) } } } } < /script> LogInForm.vue - Login < template > < main > < div class = \"container col-md-6 p-5\" > < form > < div class = \"mb-3\" > < label for = \"email\" class = \"form-label text\" > Enter your e - mail :< /label> < input type = \"email\" class = \"form-control\" id = \"email\" name = \"email\" v - model = \"email\" > < /div> < div class = \"mb-3\" > < label for = \"password\" class = \"form-label text\" > Enter password :< /label> < input type = \"password\" class = \"form-control\" id = \"password\" name = \"password\" v - model = \"password\" > < /div> < p v - if = \"error\" class = \"error text-danger\" > < strong > {{ error }} < /strong> < /p> < div class = \"p-4 d-flex justify-content-center\" > < button type = \"button\" class = \"btn btn-success mb-3\" @ click = \"logIn\" > Sign in < /button> < /div> < /form> < div class = \"container d-flex\" > < p class = \"text\" > Do you have not an account yet ?< /p> < a href = \"#\" class = \"ms-2 text-success\" @ click = \"$router.push('/registration/')\" > Sign in < /a> < /div> < /div> < /main> < /template> < script > import { mapActions , mapState } from 'pinia' import router from '@/router' import useUserStore from '@/stores/user' export default { name : \"LogIn\" , data (){ return { email : \"\" , password : \"\" , error : \"\" } }, methods : { ... mapActions ( useUserStore , [ 'login' ]), async logIn () { if ( ! this . email || ! this . password ) { this . error = '\u041e\u0448\u0438\u0431\u043a\u0430! \u0412\u0432\u0435\u0434\u0438\u0442\u0435 email \u0438 \u043f\u0430\u0440\u043e\u043b\u044c.' return } try { await this . login ({ username : this . email , password : this . password }) } catch ( e ) { this . error = '\u041e\u0448\u0438\u0431\u043a\u0430! \u041d\u0435\u0432\u0435\u0440\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u043d email \u0438\u043b\u0438 \u043f\u0430\u0440\u043e\u043b\u044c.' return } this . $router . push ( '/lk' ) }, } } < /script> EventCard.vue - Events cards < template > < div class = \"col-4\" > < div class = \"card h-100\" : event_id = \"id\" > < img : src = \"photo\" class = \"card-img-top img-fluid\" : alt = \"title\" > < div class = \"card-header d-flex justify-content-between align-content-center form-color\" > < a class = \"btn my-btn-outline-secondary btn-sm col-6\" > < svg class = \"icon m-1\" > < use xlink : href = \"#tag\" >< /use> < /svg>{{ category }}</a> < p class = \"card-text text col-4 text-center\" > {{ date }} {{ time }} < /p> < /div> < div class = \"card-body text-center d-flex flex-column justify-content-around p-3 form-color\" > < h5 class = \"card-title text\" > {{ title }} < /h5> < div class = \"card-text d-flex justify-content-around text\" > < p class = \"card-text text\" > < svg class = \"icon m-1\" > < use xlink : href = \"#place\" >< /use> < /svg>{{ place }}</p> < p class = \"card-text text-success\" > {{ price }} < /p> < /div> < div class = \"card-text d-flex justify-content-around \" > < RouterLink : to = \"`/events/${id}`\" class = \"text-black nav-link\" > < a href = \"#\" class = \"btn align-self-center btn-success\" > More detailed ... < /a> < /RouterLink> < /div> < /div> < /div> < /div> < /template> < script > export default { name : \"EventCard\" , props : { id : { type : Number , required : true }, title : { type : String , required : true }, price : { type : String , required : true }, photo : { type : String , required : true }, category : { type : String , required : true }, district : { type : String , required : true }, place : { type : String , required : true }, type_event : { type : String , required : true }, date : { type : String , required : true }, time : { type : String , required : true }, description : { type : String } }, } < /script> ListEvents.vue - Events list < template > < div class = \"container p-3\" > < div v - for = \"(eventRow, eventRowIndex) in eventRows\" : key = \"`event-row-${eventRowIndex}`\" class = \"event-row row py-2\" > < EventCard v - for = \"(event) in eventRow\" : key = \"`event-${event.id}`\" : id = \"event.id\" : photo = \"event.photo\" : title = \"event.title\" : price = \"event.price\" : category = \"event.category\" : district = \"event.district\" : place = \"event.place\" : type_event = \"event.type_event\" : date = \"event.date\" : time = \"event.time\" /> < /div> < /div> < /template> < script > import { mapActions , mapState } from 'pinia' import useEventsStore from \"@/stores/event\" ; import EventCard from \"./EventCard.vue\" ; export default { name : \"ListEvents\" , components : { EventCard }, computed : { ... mapState ( useEventsStore , [ 'events' ]), eventRows () { return this . getEventsRows ( 3 ) }, }, methods : { ... mapActions ( useEventsStore , [ 'fetchEvents' ]), getEventsRows ( rowSize ) { const eventRows = []; for ( let i = 0 ; i < this . events . length ; i += rowSize ) { const row = this . events . slice ( i , i + rowSize ); eventRows . push ( row ); } return eventRows ; }, }, mounted () { this . fetchEvents () } } < /script> EventInfo.vue - Detailed information about the event < template > < section class = \"container col-8 justify-content-center py-3 min-vh-100 form-color\" > < div class = \"d-flex flex-row\" > < img : src = \"event.photo\" : alt = \"event.title\" class = \"img-fluid\" style = \"max-height: 300px; width: auto;\" > < div class = \"d-flex flex-column p-2 \" > < h2 class = \"text-center\" > {{ event . title }} < /h2> < dl class = \"row p-4\" > < dt class = \"col-sm-7\" > Date of the event :< /dt> < dd class = \"col-sm-5\" > {{ event . date }} < /dd> < dt class = \"col-sm-7\" > Time of the event :< /dt> < dd class = \"col-sm-5\" > {{ event . time }} < /dd> < dt class = \"col-sm-7\" > Location of event :< /dt> < dd class = \"col-sm-5\" > {{ event . place }} < /dd> < dt class = \"col-sm-7\" > Price :< /dt> < dd class = \"col-sm-5\" > {{ event . price }} < /dd> < /dl> < /div> < /div> < section class = \"py-3 px-1 mb-3\" > < div v - if = \"event.description\" > < h4 class = \"mb-2\" > Description : < /h4> < p > {{ event . description }} < /p> < /div> < div v - if = \"event.contact_number\" > < h4 class = \"mb-2\" > Contacts : < /h4> < p > {{ event . contact_number }} {{ event . contact_name }} < /p> < /div> < div class = \"d-flex justify-content-center\" > < button type = \"button\" class = \"btn btn-success d-flex justify-content-center\" data - bs - toggle = \"modal\" data - bs - target = \"#exampleModal\" @ click = \"addUserEvent\" > Sign up for an event < /button> < /div> <!-- Modal --> < div class = \"modal fade\" id = \"exampleModal\" tabindex = \"-1\" aria - labelledby = \"exampleModalLabel\" aria - hidden = \"true\" > < div class = \"modal-dialog\" > < div class = \"modal-content\" > < div class = \"modal-header\" > < h5 class = \"modal-title\" id = \"exampleModalLabel\" > Congratulations !< /h5> < button type = \"button\" class = \"btn-close\" data - bs - dismiss = \"modal\" aria - label = \"Close\" >< /button> < /div> < div class = \"modal-body\" > < p > You have successfully signed up for this event !< /p> < /div> < div class = \"modal-footer\" > < button type = \"button\" class = \"btn btn-secondary\" data - bs - dismiss = \"modal\" > \u0417\u0430\u043a\u0440\u044b\u0442\u044c < /button> < /div> < /div> < /div> < /div> < /section> < div class = \"d-flex justify-content-center\" v - if = \"event.map\" > < iframe : src = \"event.map\" width = \"700\" height = \"400\" frameborder = \"0\" title = \"map\" >< /iframe> < /div> < /section> < /template> < script > import { mapState , mapActions } from \"pinia\" import useEventsStore from \"@/stores/event\" ; import useUserEventsStore from \"@/stores/users_events\" ; import useUserStore from \"@/stores/user\" ; export default { name : \"EventInfo\" , computed : { ... mapState ( useEventsStore , [ 'event' , 'events' ]), ... mapState ( useUserEventsStore , [ 'userEvents' ]), ... mapState ( useUserStore , [ 'token' ]), }, mounted () { this . fetchEvent ( this . $route . params . id ) this . $watch ( () => this . $route . params , ( toParams ) => { this . fetchEvent ( toParams . id ) } ) }, methods : { ... mapActions ( useEventsStore , [ 'fetchEvent' ]), ... mapActions ( useUserEventsStore , [ 'fetchUsersEvents' , 'addUsersEvents' ]), addUserEvent () { this . addUsersEvents ( this . event . id , this . token ). then (() => { this . fetchUsersEvents ( this . token ) }) }, } } < /script> UserEventCard.vue - Event card for which the user is registered < template > < div class = \"row col-10 g-0 mb-3 border\" > < div class = \"col-md-4 d-flex align-items-center form-color\" > < img : src = \"event_id.photo\" class = \"img-fluid \" : alt = \"event_id.title\" > < /div> < div class = \"col-md-8 d-flex flex-column justify-content-around form-color\" > < div class = \"card-header d-flex justify-content-between p-4\" > < a class = \"btn my-btn-outline-secondary btn-sm\" role = \"button\" > < svg class = \"icon m-1\" width = \"20\" height = \"20\" > < use xlink : href = \"#tag\" >< /use> < /svg>{{ event_id.category }}</a> < p class = \"card-text text\" > {{ event_id . date }} {{ event_id . time }} < /p> < /div> < div class = \"card-body text-center d-flex flex-column justify-content-around form-color\" > < h5 class = \"card-title text\" > {{ event_id . title }} < /h5> < div class = \"card-text text d-flex justify-content-around\" > < p class = \"card-location text\" > < svg class = \"icon m-1\" width = \"20\" height = \"20\" > < use xlink : href = \"#place\" >< /use> < /svg>{{ event_id.place }}</p> < p class = \"card-cost\" > {{ event_id . price }} < /p> < /div> < form class = \"flex-column justify-content-around\" > < RouterLink : to = \"`/events/${event_id.id}`\" class = \"text-black nav-link\" > < a href = \"#\" class = \"btn btn-success col-5 align-self-center mb-1\" > More detailed ... < /a> < /RouterLink> < a href = \"#\" class = \"btn btn-danger col-5 align-self-center mb-1\" @ click = \"removeEvent(id)\" > Cancel recording < /a> < /form> < /div> < /div> < /div> < /template> < script > import { mapActions , mapState } from \"pinia\" ; import useUserEventsStore from \"@/stores/users_events\" ; import useUserStore from \"@/stores/user\" ; export default { name : \"UserEventCard\" , props : { id : { type : Number , required : true }, event_id : { id : { type : Number , required : true }, title : { type : String , required : true }, price : { type : String , required : true }, photo : { type : String , required : true }, district : { type : String , required : true }, place : { type : String , required : true }, date : { type : String , required : true }, time : { type : String , required : true }, }, }, computed : { ... mapState ( useUserEventsStore , [ 'userEvents' ]), ... mapState ( useUserStore , [ 'token' ]), }, methods : { ... mapActions ( useUserEventsStore , [ 'fetchUsersEvents' , 'removeUsersEvent' ]), removeEvent ( id ) { this . removeUsersEvent ( id , this . token ). then (() => { this . fetchUsersEvents ( this . token ) }) }, }, } < /script> MyEvents.vue - List of user events in personal account < template > < div class = \"col row-1 col-12 g-4 py-3\" > < UserEventCard v - for = \"(event) in userEvents\" : key = \"`user-event-${event.id}`\" : id = \"event.id\" : event_id = \"event.event_id\" /> < /div> < /template> < script > import { mapActions , mapState } from 'pinia' import useUserEventsStore from \"@/stores/users_events\" ; import useUserStore from \"@/stores/user\" ; import UserEventCard from \"./UserEventCard.vue\" ; export default { name : \"MyEvents\" , components : { UserEventCard }, computed : { ... mapState ( useUserEventsStore , [ 'userEvents' ]), ... mapState ( useUserStore , [ 'token' ]), }, methods : { ... mapActions ( useUserEventsStore , [ 'fetchUsersEvents' ]), }, mounted () { this . fetchUsersEvents ( this . token ) } } < /script> router index.js import { createRouter , createWebHistory } from 'vue-router' const router = createRouter ({ history : createWebHistory ( import . meta . env . BASE_URL ), routes : [ { path : '/registration' , name : 'registration' , component : () => import ( '../views/RegisterView.vue' ) }, { path : '/login' , name : 'login' , component : () => import ( '../views/LogInView.vue' ) }, { path : '/' , name : 'main' , component : () => import ( '../views/MainView.vue' ) }, { path : '/lk' , name : 'lk' , component : () => import ( '../views/LkView.vue' ) }, { path : '/lk/data' , name : 'lk_data' , component : () => import ( '../views/LkData.vue' ) }, { path : '/events/:id' , name : 'eventInfo' , props : true , component : () => import ( '../views/CardView.vue' ) }, { path : '/calendar' , name : 'calendar' , component : () => import ( '../views/CalendarView.vue' ) } ] }) export default router api index.js import instance from \"../api/instance\" import UserAPI from \"../api/user\" import EventsAPI from \"../api/event\" import UsersEventsAPI from \"../api/users_events\" const userAPI = new UserAPI ( instance ) const eventsAPI = new EventsAPI ( instance ) const userEventsAPI = new UsersEventsAPI ( instance ) export { userAPI , eventsAPI , userEventsAPI } user.js - User class UserAPI { constructor ( instance ) { this . API = instance } login = async ( data ) => { return this . API ({ method : 'POST' , url : '/auth/token/login/' , data , headers : { 'Content-Type' : 'application/json' } }) } register = async ( data ) => { return this . API ({ method : 'POST' , url : '/auth/users/' , data , headers : { 'Content-Type' : 'application/json' } }) } logout = async ( token ) => { return this . API ({ method : 'POST' , url : '/auth/token/logout/' , headers : { 'Authorization' : `Token ${ token } ` } }) } currentUserInfo = async ( token ) => { return this . API ({ url : '/auth/users/me/' , headers : { 'Authorization' : `Token ${ token } ` } }) } } export default UserAPI instance.js import axios from 'axios' const apiURL = 'http://127.0.0.1:8000' const token = localStorage . getItem ( 'token' ) const instance = axios . create ({ baseURL : apiURL , }) if ( token ){ instance . defaults . headers . common [ 'Authorization' ] = \"Token \" + token ; } export default instance events.js class EventsAPI { constructor ( instance ) { this . API = instance } fetchEvent = async ( id ) => { return this . API ({ url : `/api/v1/events/ ${ id } ` }) } fetchEvents = async ( id ) => { return this . API ({ url : `/api/v1/events` }) } fetchEventsByCategory = async ( category ) => { if ( category === '' ) { return this . fetchEvents (); } return this . API ({ url : `/api/v1/events?category= ${ category } ` }) } fetchEventsByCategoryDistrictType = async ( category , district , type_event ) => { if (( category === '' ) && ( district === '' ) && ( type_event === '' )) { return this . fetchEvents (); } return this . API ({ url : `/api/v1/events?category= ${ category } &district= ${ district } &type_event= ${ type_event } ` }) } } export default EventsAPI user_events.js - User events class UsersEventsAPI { constructor ( instance ) { this . API = instance } fetchUsersEvents = async ( token ) => { return this . API ({ url : '/api/v1/users_events' , headers : { 'Authorization' : `Token ${ token } ` } }) } addUsersEvents = async ( data , token ) => { return this . API ({ method : 'POST' , url : '/api/v1/users_events/add' , data , headers : { 'Content-Type' : 'application/json' , 'Authorization' : `Token ${ token } ` } }) } removeUsersEvent = async ( id , token ) => { return this . API ({ method : 'DELETE' , url : `/api/v1/users_events/ ${ id } ` , headers : { 'Content-Type' : 'application/json' , 'Authorization' : `Token ${ token } ` } }) } } export default UsersEventsAPI stores index.js import { persist } from 'pinia-persists' import { createPinia } from 'pinia' const pinia = createPinia () pinia . use ( persist ()) export default pinia event.js - Evenements import { defineStore } from 'pinia' import { eventsAPI } from '../api' const useEventsStore = defineStore ( 'events' , { state : () => ({ events : [], categoryFilter : '' , districtFilter : '' , typeFilter : '' , event : {} }), actions : { async fetchEvents () { const response = await eventsAPI . fetchEvents () this . events = response . data return response }, async fetchEvent ( id ) { const response = await eventsAPI . fetchEvent ( id ) this . event = response . data return response }, async fetchEventsByCategoryDistrictType ( category , district , type_event ) { this . categoryFilter = category === this . categoryFilter ? '' : category ; this . districtFilter = district === this . districtFilter ? '' : district ; this . typeFilter = type_event === this . typeFilter ? '' : type_event ; const response = await eventsAPI . fetchEventsByCategoryDistrictType ( this . categoryFilter , this . districtFilter , this . typeFilter ) this . events = response . data return response } } }) export default useEventsStore user.js - User import { defineStore } from 'pinia' import { userAPI } from '../api' const useUserStore = defineStore ( 'user' , { state : () => ({ user : {}, token : null , }), actions : { setToken ( token ) { this . token = token || null }, async login ( data ) { const response = await userAPI . login ( data ) this . token = response ? . data ? . auth_token || null if ( this . token ) { localStorage . setItem ( \"token\" , this . token ) } return response }, async register ( user ) { const response = await userAPI . register ( user ) return response }, async logout () { let response = null if ( this . token ) { response = await userAPI . logout ( this . token ) if ( response . status === 204 ) { window . localStorage . removeItem ( 'token' ) this . token = '' ; this . user = {}; } } return response }, async currentUserInfo () { let response = null if ( this . token ) { response = await userAPI . currentUserInfo ( this . token ) this . user = response . data ? . username ? response . data : {} } return this . user }, }, }) export default useUserStore views MainView.vue - Home page < template > < Header /> < div class = \"min-vh-100 color-main\" > < Filter /> < ListEvents /> < /div> < Footer /> < /template> < script > import Header from \"../components/Header.vue\" ; import Footer from \"../components/Footer.vue\" ; import Filter from \"../components/Filter.vue\" ; import EventCard from \"../components/EventCard.vue\" ; import ListEvents from \"../components/ListEvents.vue\" ; export default { name : \"MainView\" , components : { ListEvents , EventCard , Filter , Footer , Header }, } < /script> RegisterView.vue - Registration page import RegisterForm from \"../components/RegisterForm.vue\"; import Header from \"../components/Header.vue\"; export default { name: \"RegisterView\", components: {Header, RegisterForm} } * LogInView.vue - Login page ```js <template> <Header/> <div class=\"color-main min-vh-100\"> <LogIn /> </div> </template> <script> import LogIn from \"../components/LogInForm.vue\"; import Header from \"../components/Header.vue\"; import Footer from \"../components/Footer.vue\"; export default { name: \"LogInView\", components: {Footer, Header, LogIn}, } </script> * LkData.vue - Personal account, a page with user data < template > < Header /> < main class = \"p-5 container-fluid d-flex flex-row vh-100 color-main\" > < aside class = \"col-lg-3 d-flex flex-column justify-content-start\" > < img src = \"https://e7.pngegg.com/pngimages/398/54/png-clipart-silhouette-graphics-male-silhouette-animals-hand.png\" height = \"auto\" alt = \"\u0424\u043e\u0442\u043e \u043f\u0440\u043e\u0444\u0438\u043b\u044f\" class = \"img-fluid img-thumbnail\" > < ul class = \"list-group col-12\" > < li class = \"list-group-item list-group-item-secondary\" > < a class = \"text-decoration-none link-dark active\" aria - current = \"true\" href = \"#\" > \u041c\u043e\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 < /a> < /li> < li class = \"list-group-item form-color\" > < a class = \"text-decoration-none text \" href = \"#\" @ click = \"$router.push('/lk/')\" > \u041c\u043e\u0438 \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u044f < /a> < /li> < li class = \"list-group-item form-color\" > < a class = \"text-danger text-decoration-none link-dark\" href = \"#\" @ click = \"Logout\" > \u0412\u044b\u0439\u0442\u0438 < /a> < /li> < /ul> < /aside> < section class = \"col-lg-6 px-5\" > < h2 class = \"text\" > \u041c\u043e\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 < /h2> < div class = \"row mt-4 \" > < ul class = \"list-group \" > < li class = \"list-group-item form-color\" > \u0418\u043c\u044f : {{ user . first_name }} < /li> < li class = \"list-group-item form-color\" > \u0424\u0430\u043c\u0438\u043b\u0438\u044f : {{ user . last_name }} < /li> < li class = \"list-group-item form-color\" > ID : {{ user . id }} < /li> < li class = \"list-group-item form-color\" > Email : {{ user . email }} < /li> < li class = \"list-group-item form-color\" > Username : {{ user . username }} < /li> < /ul> < /div> < /section> < /main> < Footer /> < /template> < script > import { mapState , mapActions } from 'pinia' import useUserStore from '@/stores/user' import Header from \"../components/Header.vue\" ; import Footer from \"../components/Footer.vue\" ; export default { name : \"LkData\" , components : { Footer , Header }, computed : { ... mapState ( useUserStore , [ 'user' , 'token' ]), }, mounted () { this . currentUserInfo (). then ( result => { if ( ! result ? . email ) { this . $router . replace ({ path : '/' }) } }) }, methods : { ... mapActions ( useUserStore , [ 'currentUserInfo' , 'logout' ]), async Logout () { await this . logout () this . $router . push ( '/' ) } } } < /script> * LkView.vue - Personal account, events page < template > < Header /> < main class = \"p-5 container-fluid d-flex flex-row vh-100 color-main\" > < aside class = \"col-lg-3 d-flex flex-column justify-content-start\" > < img src = \"https://e7.pngegg.com/pngimages/398/54/png-clipart-silhouette-graphics-male-silhouette-animals-hand.png\" height = \"auto\" alt = \"\u0424\u043e\u0442\u043e \u043f\u0440\u043e\u0444\u0438\u043b\u044f\" class = \"img-fluid img-thumbnail\" > < ul class = \"list-group col-12 text\" > < li class = \"list-group-item form-color\" > < a class = \"text-decoration-none text\" href = \"#\" @ click = \"$router.push('/lk/data')\" > \u041c\u043e\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 < /a> < /li> < li class = \"list-group-item list-group-item-secondary\" > < a class = \"text-decoration-none active link-dark\" aria - current = \"true\" href = \"#\" > \u041c\u043e\u0438 \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u044f < /a> < /li> < li class = \"list-group-item form-color\" > < a class = \"text-danger text-decoration-none \" href = \"#\" @ click = \"Logout\" > \u0412\u044b\u0439\u0442\u0438 < /a> < /li> < /ul> < /aside> < section class = \"col-lg-9 px-5\" > < h2 class = \"text\" > \u041c\u043e\u0438 \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u044f < /h2> < MyEvents /> < /section> < /main> < Footer /> < /template> < script > import Header from \"../components/Header.vue\" ; import Footer from \"../components/Footer.vue\" ; import MyEvents from \"../components/MyEvents.vue\" ; import { mapActions , mapState } from \"pinia\" ; import useUserStore from '@/stores/user' export default { name : \"LkView\" , components : { MyEvents , Footer , Header }, computed : { ... mapState ( useUserStore , [ 'token' ]) }, mounted () { this . setToken ( window . localStorage . getItem ( 'token' )) }, methods : { ... mapActions ( useUserStore , [ 'setToken' , 'logout' ]), async Logout () { await this . logout () this . $router . push ( '/' ) } } } < /script> * CardView.vue - Event information page < template > < Header /> < div class = \"color-main\" > < EventInfo /> < /div> < Footer /> < /template> < script > import Header from \"../components/Header.vue\" ; import Footer from \"../components/Footer.vue\" ; import EventInfo from \"../components/EventInfo.vue\" ; export default { name : \"CardView\" , components : { EventInfo , Footer , Header } } < /script> * CalendarView.vue - \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0441 \u043a\u0430\u043b\u0435\u043d\u0434\u0430\u0440\u0435\u043c \u0432\u0441\u0435\u0445 \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u0439 < template > < Header /> < div class = \"color-main text min-vh-100\" > < full - calendar : options = \"{ events: events, eventColor: '#089969', height: 575, width: 575, }\" /> < /div> < Footer /> < /template> < script > import { mapActions , mapState } from 'pinia' import useEventsStore from \"@/stores/event\" ; import Header from \"../components/Header.vue\" ; import Footer from \"../components/Footer.vue\" ; import FullCalendar from '../components/FullCalendar.vue' export default { name : \"CalendarView\" , components : { Footer , Header , FullCalendar }, computed : { ... mapState ( useEventsStore , [ 'events' ]), }, methods : { ... mapActions ( useEventsStore , [ 'fetchEvents' ]), }, mounted () { this . fetchEvents () } } < /script> For full documentation visit mkdocs.org .","title":"FRONT-END: \u0424\u0430\u0439\u043b\u044b \u0441 \u043a\u043e\u0434\u043e\u043c Vue.js"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"}]}