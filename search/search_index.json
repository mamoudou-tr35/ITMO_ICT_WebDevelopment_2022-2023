{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"lr1/","text":"\u041b\u0410\u0411\u041e\u0420\u0410\u0422\u041e\u0420\u041d\u0410\u042f \u0420\u0410\u0411\u041e\u0422\u0410 1 TASK 1 client.py import socket host = \"localhost\" port = 14900 sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . connect (( host , port )) sock . send ( b \"Hello, server! \\n \" ) data = sock . recv ( 16384 ) print ( data . decode ( \"utf-8\" )) sock . close () server.py import socket host = \"localhost\" port = 14900 sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . bind (( host , port )) sock . listen ( 10 ) clientsocket , address = sock . accept () data = clientsocket . recv ( 16384 ) udata = data . decode ( \"utf-8\" ) print ( udata ) clientsocket . send ( b \"Hello, client! \\n \" ) sock . close () TASK 2 client.py import socket host = \"localhost\" port = 14900 sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . connect (( host , port )) #Version with trapezoid for i in range ( 3 ): data = sock . recv ( 16384 ) text = data . decode () print ( text ) proportions = input () sock . send ( proportions . encode ()) data = sock . recv ( 16384 ) trapezoid_area = data . decode () print ( trapezoid_area ) sock . close () server.py import socket host = \"localhost\" port = 14900 sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . bind (( host , port )) sock . listen ( 10 ) #Version with trapezoid clientsocket , address = sock . accept () clientsocket . send ( b \"Enter large trapezoid base:\" ) data = clientsocket . recv ( 16384 ) large_base = int ( data . decode ()) clientsocket . send ( b \"Enter small trapezoid base:\" ) data = clientsocket . recv ( 16384 ) small_base = int ( data . decode ()) clientsocket . send ( b \"Enter trapezoid height:\" ) data = clientsocket . recv ( 16384 ) height = int ( data . decode ()) area = height * (( large_base + small_base ) / 2 ) clientsocket . send ( f \"Trapezoid area: { area } \" . encode ()) sock . close () TASK 3 client.py import socket conn = socket . socket () conn . connect (( \"127.0.0.1\" , 7779 )) result = conn . recv ( 10000 ) print ( result . decode ()) conn . close () server.py import socket server = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) host = '127.0.0.1' port = 7779 server . bind (( host , port )) server . listen ( 1 ) while True : conn , addr = server . accept () page = open ( 'index.html' ) content = page . read () page . close () response = 'HTTP/1.0 200 OK \\n\\n ' + content conn . sendall ( response . encode ()) conn . close () index.html <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > A tiny tiny page </ title > </ head > < body > < p > \"We want a few mad people now. See where the sane ones have landed us!\" </ p > < p > George Bernard Shaw (1856-1950) </ p > </ body > </ html > TASK 4 client.py import socket import threading conn = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) server = '127.0.0.1' , 8080 conn . connect ( server ) username = input ( '\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u043f\u0441\u0435\u0432\u0434\u043e\u043d\u0438\u043c: ' ) def recv_msg (): while True : msg = conn . recv ( 2000 ) . decode () if msg == 'username' : conn . send ( username . encode ()) else : print ( msg ) def print_msg (): while True : msg = ' {} says: {} ' . format ( username , input ( '' )) conn . send ( msg . encode ()) recv_thr = threading . Thread ( target = recv_msg ) print_thr = threading . Thread ( target = print_msg ) recv_thr . start () print_thr . start () server.py import socket , threading server = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) host = '127.0.0.1' port = 8080 server . bind (( host , port )) server . listen () clients = [] users = [] def broadcast ( msg , client ): for each in clients : if each != client : each . send ( msg ) def handle ( client ): while True : msg = client . recv ( 2000 ) broadcast ( msg , client ) def receive (): while True : client , addr = server . accept () client . send ( 'username' . encode ()) user = client . recv ( 2000 ) . decode () clients . append ( client ) users . append ( user ) client . send ( 'Connection established' . encode ()) thread = threading . Thread ( target = handle , args = ( client ,)) thread . start () receive () TASK 5 server.py import socket class MyHTTPServer : def __init__ ( self , host , port ): self . host = host self . port = port def serve_forever ( self ): sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . bind (( self . host , self . port )) sock . listen ( 2 ) while True : clientsocket , _ = sock . accept () self . serve_client ( clientsocket ) def serve_client ( self , clientsocket ): data = clientsocket . recv ( 18456 ) data = data . decode ( 'utf-8' ) target , method = self . parse_request ( data ) headers , body = self . parse_headers ( data ) resp = self . handle_request ( target , method , body ) if resp : self . send_response ( clientsocket , resp ) def parse_request ( self , data ): data = data . replace ( ' \\r ' , '' ) lines = data . split ( ' \\n ' ) method , target , protocol = lines [ 0 ] . split () return target , method def parse_headers ( self , data ): data = data . replace ( ' \\r ' , '' ) lines = data . split ( ' \\n ' ) i = lines . index ( '' ) headers = lines [ 1 : i ] body = lines [ - 1 ] return headers , body def handle_request ( self , target , method , body ): if target == \"/\" : if method == \"GET\" : resp = \"HTTP/1.1 200 OK \\n\\n \" with open ( 'index.html' ) as f : resp += f . read () return resp if method == \"POST\" : newbody = body . split ( '&' ) for a in newbody : if a . split ( '=' )[ 0 ] == 'subject' : subjects . append ( a . split ( '=' )[ 1 ]) if a . split ( '=' )[ 0 ] == 'mark' : marks . append ( a . split ( '=' )[ 1 ]) resp = \"HTTP/1.1 200 OK \\n\\n \" resp += \"<html><head><title>Journal</title></head><body>\" for s , m in zip ( subjects , marks ): resp += f \"<p> { s } : { m } </p>\" resp += \"</body></html>\" return resp def send_response ( self , clientsocket , resp ): clientsocket . send ( resp . encode ( 'utf-8' )) if __name__ == '__main__' : host = 'localhost' port = 8081 serv = MyHTTPServer ( host , port ) subjects = [] marks = [] try : serv . serve_forever () except KeyboardInterrupt : pass index.html <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Journal </ title > </ head > < body > < form action = \"/\" method = \"post\" > < div > < label for = \"name\" > Subject: </ label > < input type = \"text\" id = \"name\" name = \"subject\" /> </ div > < div > < label for = \"mail\" > Mark: </ label > < input type = \"number\" id = \"mail\" name = \"mark\" /> </ div > < div > < input type = \"submit\" > </ div > </ body > </ html >","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161"},{"location":"lr1/#1","text":"","title":"\u041b\u0410\u0411\u041e\u0420\u0410\u0422\u041e\u0420\u041d\u0410\u042f \u0420\u0410\u0411\u041e\u0422\u0410 1"},{"location":"lr1/#task-1","text":"client.py import socket host = \"localhost\" port = 14900 sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . connect (( host , port )) sock . send ( b \"Hello, server! \\n \" ) data = sock . recv ( 16384 ) print ( data . decode ( \"utf-8\" )) sock . close () server.py import socket host = \"localhost\" port = 14900 sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . bind (( host , port )) sock . listen ( 10 ) clientsocket , address = sock . accept () data = clientsocket . recv ( 16384 ) udata = data . decode ( \"utf-8\" ) print ( udata ) clientsocket . send ( b \"Hello, client! \\n \" ) sock . close ()","title":"TASK 1"},{"location":"lr1/#task-2","text":"client.py import socket host = \"localhost\" port = 14900 sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . connect (( host , port )) #Version with trapezoid for i in range ( 3 ): data = sock . recv ( 16384 ) text = data . decode () print ( text ) proportions = input () sock . send ( proportions . encode ()) data = sock . recv ( 16384 ) trapezoid_area = data . decode () print ( trapezoid_area ) sock . close () server.py import socket host = \"localhost\" port = 14900 sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . bind (( host , port )) sock . listen ( 10 ) #Version with trapezoid clientsocket , address = sock . accept () clientsocket . send ( b \"Enter large trapezoid base:\" ) data = clientsocket . recv ( 16384 ) large_base = int ( data . decode ()) clientsocket . send ( b \"Enter small trapezoid base:\" ) data = clientsocket . recv ( 16384 ) small_base = int ( data . decode ()) clientsocket . send ( b \"Enter trapezoid height:\" ) data = clientsocket . recv ( 16384 ) height = int ( data . decode ()) area = height * (( large_base + small_base ) / 2 ) clientsocket . send ( f \"Trapezoid area: { area } \" . encode ()) sock . close ()","title":"TASK 2"},{"location":"lr1/#task-3","text":"client.py import socket conn = socket . socket () conn . connect (( \"127.0.0.1\" , 7779 )) result = conn . recv ( 10000 ) print ( result . decode ()) conn . close () server.py import socket server = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) host = '127.0.0.1' port = 7779 server . bind (( host , port )) server . listen ( 1 ) while True : conn , addr = server . accept () page = open ( 'index.html' ) content = page . read () page . close () response = 'HTTP/1.0 200 OK \\n\\n ' + content conn . sendall ( response . encode ()) conn . close () index.html <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > A tiny tiny page </ title > </ head > < body > < p > \"We want a few mad people now. See where the sane ones have landed us!\" </ p > < p > George Bernard Shaw (1856-1950) </ p > </ body > </ html >","title":"TASK 3"},{"location":"lr1/#task-4","text":"client.py import socket import threading conn = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) server = '127.0.0.1' , 8080 conn . connect ( server ) username = input ( '\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u043f\u0441\u0435\u0432\u0434\u043e\u043d\u0438\u043c: ' ) def recv_msg (): while True : msg = conn . recv ( 2000 ) . decode () if msg == 'username' : conn . send ( username . encode ()) else : print ( msg ) def print_msg (): while True : msg = ' {} says: {} ' . format ( username , input ( '' )) conn . send ( msg . encode ()) recv_thr = threading . Thread ( target = recv_msg ) print_thr = threading . Thread ( target = print_msg ) recv_thr . start () print_thr . start () server.py import socket , threading server = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) host = '127.0.0.1' port = 8080 server . bind (( host , port )) server . listen () clients = [] users = [] def broadcast ( msg , client ): for each in clients : if each != client : each . send ( msg ) def handle ( client ): while True : msg = client . recv ( 2000 ) broadcast ( msg , client ) def receive (): while True : client , addr = server . accept () client . send ( 'username' . encode ()) user = client . recv ( 2000 ) . decode () clients . append ( client ) users . append ( user ) client . send ( 'Connection established' . encode ()) thread = threading . Thread ( target = handle , args = ( client ,)) thread . start () receive ()","title":"TASK 4"},{"location":"lr1/#task-5","text":"server.py import socket class MyHTTPServer : def __init__ ( self , host , port ): self . host = host self . port = port def serve_forever ( self ): sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . bind (( self . host , self . port )) sock . listen ( 2 ) while True : clientsocket , _ = sock . accept () self . serve_client ( clientsocket ) def serve_client ( self , clientsocket ): data = clientsocket . recv ( 18456 ) data = data . decode ( 'utf-8' ) target , method = self . parse_request ( data ) headers , body = self . parse_headers ( data ) resp = self . handle_request ( target , method , body ) if resp : self . send_response ( clientsocket , resp ) def parse_request ( self , data ): data = data . replace ( ' \\r ' , '' ) lines = data . split ( ' \\n ' ) method , target , protocol = lines [ 0 ] . split () return target , method def parse_headers ( self , data ): data = data . replace ( ' \\r ' , '' ) lines = data . split ( ' \\n ' ) i = lines . index ( '' ) headers = lines [ 1 : i ] body = lines [ - 1 ] return headers , body def handle_request ( self , target , method , body ): if target == \"/\" : if method == \"GET\" : resp = \"HTTP/1.1 200 OK \\n\\n \" with open ( 'index.html' ) as f : resp += f . read () return resp if method == \"POST\" : newbody = body . split ( '&' ) for a in newbody : if a . split ( '=' )[ 0 ] == 'subject' : subjects . append ( a . split ( '=' )[ 1 ]) if a . split ( '=' )[ 0 ] == 'mark' : marks . append ( a . split ( '=' )[ 1 ]) resp = \"HTTP/1.1 200 OK \\n\\n \" resp += \"<html><head><title>Journal</title></head><body>\" for s , m in zip ( subjects , marks ): resp += f \"<p> { s } : { m } </p>\" resp += \"</body></html>\" return resp def send_response ( self , clientsocket , resp ): clientsocket . send ( resp . encode ( 'utf-8' )) if __name__ == '__main__' : host = 'localhost' port = 8081 serv = MyHTTPServer ( host , port ) subjects = [] marks = [] try : serv . serve_forever () except KeyboardInterrupt : pass index.html <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Journal </ title > </ head > < body > < form action = \"/\" method = \"post\" > < div > < label for = \"name\" > Subject: </ label > < input type = \"text\" id = \"name\" name = \"subject\" /> </ div > < div > < label for = \"mail\" > Mark: </ label > < input type = \"number\" id = \"mail\" name = \"mark\" /> </ div > < div > < input type = \"submit\" > </ div > </ body > </ html >","title":"TASK 5"},{"location":"lr2/","text":"\u041b\u0410\u0411\u041e\u0420\u0410\u0422\u041e\u0420\u041d\u0410\u042f \u0420\u0410\u0411\u041e\u0422\u0410 \u21162 \u041e\u041f\u0418\u0421\u0410\u041d\u0418\u0415 \u0417\u0410\u0414\u0410\u041d\u0418\u042f \u0412\u0410\u0420\u0418\u0410\u041d\u0422 1 \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f, \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043e\u0442\u0435\u043b\u044f, \u0430\u0434\u0440\u0435\u0441, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435, \u0442\u0438\u043f\u044b \u043d\u043e\u043c\u0435\u0440\u043e\u0432, \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c, \u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c, \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0438 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u043e\u043c\u0435\u0440\u043e\u0432. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439. \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u043d\u043e\u043c\u0435\u0440\u0430\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u043f\u0435\u0440\u0438\u043e\u0434 \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u044f, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0441\u0435\u043b\u0438\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u043e\u0442\u0435\u043b\u044c \u0438 \u0432\u044b\u0441\u0435\u043b\u0438\u0442\u044c \u0438\u0437 \u043e\u0442\u0435\u043b\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u043f\u043e\u0441\u0442\u043e\u044f\u043b\u044c\u0446\u0435\u0432 \u043e\u0442\u0435\u043b\u044f \u0437\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043c\u0435\u0441\u044f\u0446. \u0444\u0430\u0439\u043b\u044b \u0441 \u043a\u043e\u0434\u043e\u043c model.py from django.db import models from django.contrib.auth.models import AbstractUser class User ( AbstractUser ): birth_date = models . DateField ( blank = True , null = True ) passport = models . CharField ( max_length = 20 , blank = True , null = True ) phone_number = models . CharField ( max_length = 11 , blank = True , null = True ) room = models . ManyToManyField ( 'Room' , through = 'Booking' ) class Hotel ( models . Model ): name = models . CharField ( max_length = 40 ) owner = models . CharField ( max_length = 40 ) address = models . CharField ( max_length = 60 ) def __str__ ( self ): return self . name class Room ( models . Model ): number = models . CharField ( max_length = 4 ) hotel = models . ForeignKey ( 'Hotel' , on_delete = models . CASCADE ) class RoomType ( models . TextChoices ): s = 's' , \"Standard\" st = 'st' , \"Studio\" js = 'js' , \"Junior Suite\" su = 'su' , \"Suite\" dl = 'dl' , \"Deluxe\" fr = 'fr' , \"Family Room\" hr = 'hr' , \"Honeymoon Room\" room_type = models . CharField ( choices = RoomType . choices , max_length = 2 ) price = models . CharField ( max_length = 10 ) num_persons = models . CharField ( max_length = 1 ) def __str__ ( self ): return self . number class Booking ( models . Model ): date_in = models . DateField () date_out = models . DateField () user = models . ForeignKey ( 'User' , on_delete = models . CASCADE ) room = models . ForeignKey ( 'Room' , on_delete = models . CASCADE ) checked_in = models . BooleanField ( default = False ) class Review ( models . Model ): user = models . ForeignKey ( 'User' , on_delete = models . SET_NULL , null = True ) class Rating ( models . TextChoices ): f = '1' , \"Awful\" d = '2' , \"Bad\" c = '3' , \"Okay\" b = '4' , \"Good\" a = '5' , \"Great\" hotel = models . ForeignKey ( 'Hotel' , on_delete = models . SET_NULL , null = True ) room = models . ForeignKey ( 'Room' , on_delete = models . SET_NULL , null = True ) rating = models . CharField ( choices = Rating . choices , max_length = 2 ) date_in = models . DateField () date_out = models . DateField () body = models . CharField ( max_length = 500 ) views.py from datetime import datetime , timedelta from django.shortcuts import render , get_object_or_404 , redirect from django.views.generic.list import ListView from django.views.generic.detail import DetailView from django.views.generic.edit import CreateView , DeleteView from django.contrib.auth import authenticate , login from .forms import * from .models import * from django.contrib.auth import get_user_model User = get_user_model () def index ( request ): return render ( request , 'index.html' ) def profile ( request ): return render ( request , 'profile.html' ) def register ( request ): if request . method == 'POST' : form = RegistrationForm ( request . POST ) if form . is_valid (): form . save () username = form . cleaned_data [ 'username' ] password = form . cleaned_data [ 'password1' ] user = authenticate ( username = username , password = password ) login ( request , user ) return redirect ( 'index' ) else : form = RegistrationForm () context = { 'form' : form } return render ( request , 'registration/register.html' , context ) def edit_profile ( request ): user = request . user if request . method == 'POST' : form = EditProfileForm ( request . POST , request . FILES , instance = user ) if form . is_valid (): form . save () return redirect ( 'profile' ) else : form = EditProfileForm ( instance = user ) context = { 'form' : form } return render ( request , 'edit_profile.html' , context ) class ListHotels ( ListView ): model = Hotel template_name = 'hotels.html' context_object_name = 'hotels' class ListRooms ( ListView ): template_name = 'rooms.html' context_object_name = 'rooms' def get_queryset ( self ): return Room . objects . all () . order_by ( 'price' ) class ListHotelRooms ( ListView ): template_name = 'rooms_by_hotel.html' context_object_name = 'hotel' def get_queryset ( self ): self . hotel = get_object_or_404 ( Hotel , pk = self . kwargs [ 'pk' ]) return Room . objects . filter ( hotel = self . hotel ) class RoomDetail ( DetailView ): model = Room template_name = 'room.html' context_object_name = 'room' class CreateBooking ( CreateView ): form_class = CreateBookingForm model = Booking template_name = 'create_booking.html' context_object_name = 'booking' success_url = '/profile/bookings' def get_initial ( self ): initial = super ( CreateBooking , self ) . get_initial () initial = initial . copy () initial [ 'user' ] = self . request . user . pk initial [ 'room' ] = get_object_or_404 ( Room , pk = self . kwargs [ 'pk' ]) return initial class ListBookings ( ListView ): template_name = 'bookings_list.html' context_object_name = 'bookings_list' def get_queryset ( self ): self . user = self . request . user . pk return Booking . objects . filter ( user = self . user ) class DeleteBooking ( DeleteView ): model = Booking template_name = 'delete_booking.html' context_object_name = 'booking' success_url = '/profile/bookings' class ListReviews ( ListView ): model = Review template_name = 'reviews.html' context_object_name = 'reviews' class CreateReview ( CreateView ): model = Review form_class = CreateReviewForm template_name = 'create_review.html' context_object_name = 'review' success_url = '/reviews' def get_initial ( self ): initial = super ( CreateReview , self ) . get_initial () initial = initial . copy () room = Room . objects . get ( pk = self . kwargs [ 'pk' ]) room_hotel = getattr ( room , 'hotel' ) initial [ 'user' ] = self . request . user . pk initial [ 'hotel' ] = room_hotel initial [ 'room' ] = room return initial class ListGuests ( ListView ): template_name = 'last_month_guests.html' context_object_name = 'guests_list' def get_queryset ( self ): last_month = datetime . today () - timedelta ( days = 30 ) booking_queries = Booking . objects . filter ( checked_in = True ) . filter ( date_in__gte = last_month ) return booking_queries urls.py from django.urls import path from .views import * urlpatterns = [ path ( '' , index , name = 'index' ), path ( 'hotels/' , ListHotels . as_view (), name = 'hotels' ), path ( 'rooms/' , ListRooms . as_view (), name = 'rooms' ), path ( 'hotels/<int:pk>/' , ListHotelRooms . as_view ()), path ( 'rooms/<int:pk>/' , RoomDetail . as_view ()), path ( 'rooms/<int:pk>/book' , CreateBooking . as_view (), name = 'booking' ), path ( 'register/' , register , name = 'register' ), path ( 'profile/' , profile , name = 'profile' ), path ( 'profile/edit' , edit_profile , name = 'edit_profile' ), path ( 'profile/bookings' , ListBookings . as_view (), name = 'bookings' ), path ( 'profile/bookings/delete/<int:pk>/' , DeleteBooking . as_view (), name = 'delete_booking' ), path ( 'reviews/' , ListReviews . as_view (), name = 'review_list' ), path ( 'rooms/<int:pk>/add_review' , CreateReview . as_view (), name = 'add_review' ), path ( 'last_guests/' , ListGuests . as_view (), name = 'last_guests' ) ] forms.py from django import forms from django.contrib.auth.forms import UserCreationForm from .models import User , Booking , Review from datetime import date class RegistrationForm ( UserCreationForm ): class Meta : model = User fields = ( 'username' , 'email' , 'password1' , 'password2' ) class EditProfileForm ( forms . ModelForm ): username = forms . CharField ( required = True ) email = forms . EmailField ( required = True ) class Meta : model = User fields = ( 'first_name' , 'last_name' , 'birth_date' , 'passport' , 'phone_number' ) widgets = { 'birth_date' : forms . DateInput ( attrs = { 'type' : 'date' }, format = 'd-%m-%Y' ) } def clean_email ( self ): username = self . cleaned_data . get ( 'username' ) email = self . cleaned_data . get ( 'email' ) if email and User . objects . filter ( email = email ) . exclude ( username = username ) . count (): raise forms . ValidationError ( 'This email is already in use. Please enter a different one.' ) return email def save ( self , commit = True ): user = super ( EditProfileForm , self ) . save ( commit = False ) user . email = self . cleaned_data [ 'email' ] if commit : user . save () return user class CreateBookingForm ( forms . ModelForm ): class Meta : model = Booking fields = ( 'user' , 'room' , 'date_in' , 'date_out' ) widgets = { 'date_in' : forms . DateInput ( attrs = { 'type' : 'date' }, format = 'd-%m-%Y' ), 'date_out' : forms . DateInput ( attrs = { 'type' : 'date' }, format = 'd-%m-%Y' ), } def __init__ ( self , * args , ** kwargs ): super ( CreateBookingForm , self ) . __init__ ( * args , ** kwargs ) self . fields [ 'user' ] . disabled = True self . fields [ 'room' ] . disabled = True def clean ( self ): cleaned_data = super () . clean () date_in = cleaned_data . get ( \"date_in\" ) date_out = cleaned_data . get ( \"date_out\" ) today = date . today () if date_out < date_in : raise forms . ValidationError ( \"'Date in' shouldn't be greater than 'Date out'\" ) if date_in < today : raise forms . ValidationError ( \"Can't book a room in the past\" ) class CreateReviewForm ( forms . ModelForm ): class Meta : model = Review fields = ( 'user' , 'hotel' , 'room' , 'rating' , 'date_in' , 'date_out' , 'body' ) widgets = { 'date_in' : forms . DateInput ( attrs = { 'type' : 'date' }, format = 'd-%m-%Y' ), 'date_out' : forms . DateInput ( attrs = { 'type' : 'date' }, format = 'd-%m-%Y' ), 'body' : forms . Textarea (), } def __init__ ( self , * args , ** kwargs ): super ( CreateReviewForm , self ) . __init__ ( * args , ** kwargs ) self . fields [ 'user' ] . disabled = True self . fields [ 'room' ] . disabled = True self . fields [ 'hotel' ] . disabled = True","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162"},{"location":"lr2/#no2","text":"","title":"\u041b\u0410\u0411\u041e\u0420\u0410\u0422\u041e\u0420\u041d\u0410\u042f \u0420\u0410\u0411\u041e\u0422\u0410 \u21162"},{"location":"lr2/#_1","text":"","title":"\u041e\u041f\u0418\u0421\u0410\u041d\u0418\u0415 \u0417\u0410\u0414\u0410\u041d\u0418\u042f"},{"location":"lr2/#1","text":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f, \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043e\u0442\u0435\u043b\u044f, \u0430\u0434\u0440\u0435\u0441, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435, \u0442\u0438\u043f\u044b \u043d\u043e\u043c\u0435\u0440\u043e\u0432, \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c, \u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c, \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0438 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u043e\u043c\u0435\u0440\u043e\u0432. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439. \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u043d\u043e\u043c\u0435\u0440\u0430\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u043f\u0435\u0440\u0438\u043e\u0434 \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u044f, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0441\u0435\u043b\u0438\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u043e\u0442\u0435\u043b\u044c \u0438 \u0432\u044b\u0441\u0435\u043b\u0438\u0442\u044c \u0438\u0437 \u043e\u0442\u0435\u043b\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u043f\u043e\u0441\u0442\u043e\u044f\u043b\u044c\u0446\u0435\u0432 \u043e\u0442\u0435\u043b\u044f \u0437\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043c\u0435\u0441\u044f\u0446.","title":"\u0412\u0410\u0420\u0418\u0410\u041d\u0422 1"},{"location":"lr2/#_2","text":"model.py from django.db import models from django.contrib.auth.models import AbstractUser class User ( AbstractUser ): birth_date = models . DateField ( blank = True , null = True ) passport = models . CharField ( max_length = 20 , blank = True , null = True ) phone_number = models . CharField ( max_length = 11 , blank = True , null = True ) room = models . ManyToManyField ( 'Room' , through = 'Booking' ) class Hotel ( models . Model ): name = models . CharField ( max_length = 40 ) owner = models . CharField ( max_length = 40 ) address = models . CharField ( max_length = 60 ) def __str__ ( self ): return self . name class Room ( models . Model ): number = models . CharField ( max_length = 4 ) hotel = models . ForeignKey ( 'Hotel' , on_delete = models . CASCADE ) class RoomType ( models . TextChoices ): s = 's' , \"Standard\" st = 'st' , \"Studio\" js = 'js' , \"Junior Suite\" su = 'su' , \"Suite\" dl = 'dl' , \"Deluxe\" fr = 'fr' , \"Family Room\" hr = 'hr' , \"Honeymoon Room\" room_type = models . CharField ( choices = RoomType . choices , max_length = 2 ) price = models . CharField ( max_length = 10 ) num_persons = models . CharField ( max_length = 1 ) def __str__ ( self ): return self . number class Booking ( models . Model ): date_in = models . DateField () date_out = models . DateField () user = models . ForeignKey ( 'User' , on_delete = models . CASCADE ) room = models . ForeignKey ( 'Room' , on_delete = models . CASCADE ) checked_in = models . BooleanField ( default = False ) class Review ( models . Model ): user = models . ForeignKey ( 'User' , on_delete = models . SET_NULL , null = True ) class Rating ( models . TextChoices ): f = '1' , \"Awful\" d = '2' , \"Bad\" c = '3' , \"Okay\" b = '4' , \"Good\" a = '5' , \"Great\" hotel = models . ForeignKey ( 'Hotel' , on_delete = models . SET_NULL , null = True ) room = models . ForeignKey ( 'Room' , on_delete = models . SET_NULL , null = True ) rating = models . CharField ( choices = Rating . choices , max_length = 2 ) date_in = models . DateField () date_out = models . DateField () body = models . CharField ( max_length = 500 ) views.py from datetime import datetime , timedelta from django.shortcuts import render , get_object_or_404 , redirect from django.views.generic.list import ListView from django.views.generic.detail import DetailView from django.views.generic.edit import CreateView , DeleteView from django.contrib.auth import authenticate , login from .forms import * from .models import * from django.contrib.auth import get_user_model User = get_user_model () def index ( request ): return render ( request , 'index.html' ) def profile ( request ): return render ( request , 'profile.html' ) def register ( request ): if request . method == 'POST' : form = RegistrationForm ( request . POST ) if form . is_valid (): form . save () username = form . cleaned_data [ 'username' ] password = form . cleaned_data [ 'password1' ] user = authenticate ( username = username , password = password ) login ( request , user ) return redirect ( 'index' ) else : form = RegistrationForm () context = { 'form' : form } return render ( request , 'registration/register.html' , context ) def edit_profile ( request ): user = request . user if request . method == 'POST' : form = EditProfileForm ( request . POST , request . FILES , instance = user ) if form . is_valid (): form . save () return redirect ( 'profile' ) else : form = EditProfileForm ( instance = user ) context = { 'form' : form } return render ( request , 'edit_profile.html' , context ) class ListHotels ( ListView ): model = Hotel template_name = 'hotels.html' context_object_name = 'hotels' class ListRooms ( ListView ): template_name = 'rooms.html' context_object_name = 'rooms' def get_queryset ( self ): return Room . objects . all () . order_by ( 'price' ) class ListHotelRooms ( ListView ): template_name = 'rooms_by_hotel.html' context_object_name = 'hotel' def get_queryset ( self ): self . hotel = get_object_or_404 ( Hotel , pk = self . kwargs [ 'pk' ]) return Room . objects . filter ( hotel = self . hotel ) class RoomDetail ( DetailView ): model = Room template_name = 'room.html' context_object_name = 'room' class CreateBooking ( CreateView ): form_class = CreateBookingForm model = Booking template_name = 'create_booking.html' context_object_name = 'booking' success_url = '/profile/bookings' def get_initial ( self ): initial = super ( CreateBooking , self ) . get_initial () initial = initial . copy () initial [ 'user' ] = self . request . user . pk initial [ 'room' ] = get_object_or_404 ( Room , pk = self . kwargs [ 'pk' ]) return initial class ListBookings ( ListView ): template_name = 'bookings_list.html' context_object_name = 'bookings_list' def get_queryset ( self ): self . user = self . request . user . pk return Booking . objects . filter ( user = self . user ) class DeleteBooking ( DeleteView ): model = Booking template_name = 'delete_booking.html' context_object_name = 'booking' success_url = '/profile/bookings' class ListReviews ( ListView ): model = Review template_name = 'reviews.html' context_object_name = 'reviews' class CreateReview ( CreateView ): model = Review form_class = CreateReviewForm template_name = 'create_review.html' context_object_name = 'review' success_url = '/reviews' def get_initial ( self ): initial = super ( CreateReview , self ) . get_initial () initial = initial . copy () room = Room . objects . get ( pk = self . kwargs [ 'pk' ]) room_hotel = getattr ( room , 'hotel' ) initial [ 'user' ] = self . request . user . pk initial [ 'hotel' ] = room_hotel initial [ 'room' ] = room return initial class ListGuests ( ListView ): template_name = 'last_month_guests.html' context_object_name = 'guests_list' def get_queryset ( self ): last_month = datetime . today () - timedelta ( days = 30 ) booking_queries = Booking . objects . filter ( checked_in = True ) . filter ( date_in__gte = last_month ) return booking_queries urls.py from django.urls import path from .views import * urlpatterns = [ path ( '' , index , name = 'index' ), path ( 'hotels/' , ListHotels . as_view (), name = 'hotels' ), path ( 'rooms/' , ListRooms . as_view (), name = 'rooms' ), path ( 'hotels/<int:pk>/' , ListHotelRooms . as_view ()), path ( 'rooms/<int:pk>/' , RoomDetail . as_view ()), path ( 'rooms/<int:pk>/book' , CreateBooking . as_view (), name = 'booking' ), path ( 'register/' , register , name = 'register' ), path ( 'profile/' , profile , name = 'profile' ), path ( 'profile/edit' , edit_profile , name = 'edit_profile' ), path ( 'profile/bookings' , ListBookings . as_view (), name = 'bookings' ), path ( 'profile/bookings/delete/<int:pk>/' , DeleteBooking . as_view (), name = 'delete_booking' ), path ( 'reviews/' , ListReviews . as_view (), name = 'review_list' ), path ( 'rooms/<int:pk>/add_review' , CreateReview . as_view (), name = 'add_review' ), path ( 'last_guests/' , ListGuests . as_view (), name = 'last_guests' ) ] forms.py from django import forms from django.contrib.auth.forms import UserCreationForm from .models import User , Booking , Review from datetime import date class RegistrationForm ( UserCreationForm ): class Meta : model = User fields = ( 'username' , 'email' , 'password1' , 'password2' ) class EditProfileForm ( forms . ModelForm ): username = forms . CharField ( required = True ) email = forms . EmailField ( required = True ) class Meta : model = User fields = ( 'first_name' , 'last_name' , 'birth_date' , 'passport' , 'phone_number' ) widgets = { 'birth_date' : forms . DateInput ( attrs = { 'type' : 'date' }, format = 'd-%m-%Y' ) } def clean_email ( self ): username = self . cleaned_data . get ( 'username' ) email = self . cleaned_data . get ( 'email' ) if email and User . objects . filter ( email = email ) . exclude ( username = username ) . count (): raise forms . ValidationError ( 'This email is already in use. Please enter a different one.' ) return email def save ( self , commit = True ): user = super ( EditProfileForm , self ) . save ( commit = False ) user . email = self . cleaned_data [ 'email' ] if commit : user . save () return user class CreateBookingForm ( forms . ModelForm ): class Meta : model = Booking fields = ( 'user' , 'room' , 'date_in' , 'date_out' ) widgets = { 'date_in' : forms . DateInput ( attrs = { 'type' : 'date' }, format = 'd-%m-%Y' ), 'date_out' : forms . DateInput ( attrs = { 'type' : 'date' }, format = 'd-%m-%Y' ), } def __init__ ( self , * args , ** kwargs ): super ( CreateBookingForm , self ) . __init__ ( * args , ** kwargs ) self . fields [ 'user' ] . disabled = True self . fields [ 'room' ] . disabled = True def clean ( self ): cleaned_data = super () . clean () date_in = cleaned_data . get ( \"date_in\" ) date_out = cleaned_data . get ( \"date_out\" ) today = date . today () if date_out < date_in : raise forms . ValidationError ( \"'Date in' shouldn't be greater than 'Date out'\" ) if date_in < today : raise forms . ValidationError ( \"Can't book a room in the past\" ) class CreateReviewForm ( forms . ModelForm ): class Meta : model = Review fields = ( 'user' , 'hotel' , 'room' , 'rating' , 'date_in' , 'date_out' , 'body' ) widgets = { 'date_in' : forms . DateInput ( attrs = { 'type' : 'date' }, format = 'd-%m-%Y' ), 'date_out' : forms . DateInput ( attrs = { 'type' : 'date' }, format = 'd-%m-%Y' ), 'body' : forms . Textarea (), } def __init__ ( self , * args , ** kwargs ): super ( CreateReviewForm , self ) . __init__ ( * args , ** kwargs ) self . fields [ 'user' ] . disabled = True self . fields [ 'room' ] . disabled = True self . fields [ 'hotel' ] . disabled = True","title":"\u0444\u0430\u0439\u043b\u044b \u0441 \u043a\u043e\u0434\u043e\u043c"}]}